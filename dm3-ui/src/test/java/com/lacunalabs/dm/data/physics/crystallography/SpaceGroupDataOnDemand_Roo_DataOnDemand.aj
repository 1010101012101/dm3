// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.data.physics.crystallography;

import com.lacunalabs.dm.data.physics.crystallography.PointGroupDataOnDemand;
import com.lacunalabs.dm.data.physics.crystallography.SpaceGroup;
import com.lacunalabs.dm.data.physics.crystallography.SpaceGroupDataOnDemand;
import com.lacunalabs.dm.data.repository.physics.crystallography.SpaceGroupService;
import com.lacunalabs.dm.shared.physics.fundamental.MetaDataType;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect SpaceGroupDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SpaceGroupDataOnDemand: @Component;
    
    private Random SpaceGroupDataOnDemand.rnd = new SecureRandom();
    
    private List<SpaceGroup> SpaceGroupDataOnDemand.data;
    
    @Autowired
    private PointGroupDataOnDemand SpaceGroupDataOnDemand.pointGroupDataOnDemand;
    
    @Autowired
    SpaceGroupService SpaceGroupDataOnDemand.spaceGroupService;
    
    public SpaceGroup SpaceGroupDataOnDemand.getNewTransientSpaceGroup(int index) {
        SpaceGroup obj = new SpaceGroup();
        setCoordinatePoints(obj, index);
        setGeneralReflectionConditions(obj, index);
        setMetadata(obj, index);
        setMetadataType(obj, index);
        setName(obj, index);
        setSpaceGroupNumber(obj, index);
        setSpecialCoordinates(obj, index);
        setSymbol(obj, index);
        return obj;
    }
    
    public void SpaceGroupDataOnDemand.setCoordinatePoints(SpaceGroup obj, int index) {
        String coordinatePoints = "coordinatePoints_" + index;
        obj.setCoordinatePoints(coordinatePoints);
    }
    
    public void SpaceGroupDataOnDemand.setGeneralReflectionConditions(SpaceGroup obj, int index) {
        String generalReflectionConditions = "generalReflectionConditions_" + index;
        obj.setGeneralReflectionConditions(generalReflectionConditions);
    }
    
    public void SpaceGroupDataOnDemand.setMetadata(SpaceGroup obj, int index) {
        String metadata = "metadata_" + index;
        obj.setMetadata(metadata);
    }
    
    public void SpaceGroupDataOnDemand.setMetadataType(SpaceGroup obj, int index) {
        MetaDataType metadataType = MetaDataType.class.getEnumConstants()[0];
        obj.setMetadataType(metadataType);
    }
    
    public void SpaceGroupDataOnDemand.setName(SpaceGroup obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void SpaceGroupDataOnDemand.setSpaceGroupNumber(SpaceGroup obj, int index) {
        Integer spaceGroupNumber = new Integer(index);
        obj.setSpaceGroupNumber(spaceGroupNumber);
    }
    
    public void SpaceGroupDataOnDemand.setSpecialCoordinates(SpaceGroup obj, int index) {
        String specialCoordinates = "specialCoordinates_" + index;
        obj.setSpecialCoordinates(specialCoordinates);
    }
    
    public void SpaceGroupDataOnDemand.setSymbol(SpaceGroup obj, int index) {
        String symbol = "symbol_" + index;
        if (symbol.length() > 10) {
            symbol = symbol.substring(0, 10);
        }
        obj.setSymbol(symbol);
    }
    
    public SpaceGroup SpaceGroupDataOnDemand.getSpecificSpaceGroup(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SpaceGroup obj = data.get(index);
        BigInteger id = obj.getId();
        return spaceGroupService.findSpaceGroup(id);
    }
    
    public SpaceGroup SpaceGroupDataOnDemand.getRandomSpaceGroup() {
        init();
        SpaceGroup obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return spaceGroupService.findSpaceGroup(id);
    }
    
    public boolean SpaceGroupDataOnDemand.modifySpaceGroup(SpaceGroup obj) {
        return false;
    }
    
    public void SpaceGroupDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = spaceGroupService.findSpaceGroupEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SpaceGroup' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SpaceGroup>();
        for (int i = 0; i < 10; i++) {
            SpaceGroup obj = getNewTransientSpaceGroup(i);
            try {
                spaceGroupService.saveSpaceGroup(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
