// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.data.physics.fundamental;

import com.lacunalabs.dm.data.physics.fundamental.PeriodicTableEntryDataOnDemand;
import com.lacunalabs.dm.data.physics.fundamental.PeriodicTableEntryIntegrationTest;
import com.lacunalabs.dm.data.repository.physics.fundamental.PeriodicTableEntryService;
import java.math.BigInteger;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

privileged aspect PeriodicTableEntryIntegrationTest_Roo_IntegrationTest {
    
    declare @type: PeriodicTableEntryIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: PeriodicTableEntryIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    @Autowired
    private PeriodicTableEntryDataOnDemand PeriodicTableEntryIntegrationTest.dod;
    
    @Autowired
    PeriodicTableEntryService PeriodicTableEntryIntegrationTest.periodicTableEntryService;
    
    @Test
    public void PeriodicTableEntryIntegrationTest.testCountAllPeriodicTableEntrys() {
        Assert.assertNotNull("Data on demand for 'PeriodicTableEntry' failed to initialize correctly", dod.getRandomPeriodicTableEntry());
        long count = periodicTableEntryService.countAllPeriodicTableEntrys();
        Assert.assertTrue("Counter for 'PeriodicTableEntry' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void PeriodicTableEntryIntegrationTest.testFindPeriodicTableEntry() {
        PeriodicTableEntry obj = dod.getRandomPeriodicTableEntry();
        Assert.assertNotNull("Data on demand for 'PeriodicTableEntry' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'PeriodicTableEntry' failed to provide an identifier", id);
        obj = periodicTableEntryService.findPeriodicTableEntry(id);
        Assert.assertNotNull("Find method for 'PeriodicTableEntry' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'PeriodicTableEntry' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void PeriodicTableEntryIntegrationTest.testFindAllPeriodicTableEntrys() {
        Assert.assertNotNull("Data on demand for 'PeriodicTableEntry' failed to initialize correctly", dod.getRandomPeriodicTableEntry());
        long count = periodicTableEntryService.countAllPeriodicTableEntrys();
        Assert.assertTrue("Too expensive to perform a find all test for 'PeriodicTableEntry', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<PeriodicTableEntry> result = periodicTableEntryService.findAllPeriodicTableEntrys();
        Assert.assertNotNull("Find all method for 'PeriodicTableEntry' illegally returned null", result);
        Assert.assertTrue("Find all method for 'PeriodicTableEntry' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void PeriodicTableEntryIntegrationTest.testFindPeriodicTableEntryEntries() {
        Assert.assertNotNull("Data on demand for 'PeriodicTableEntry' failed to initialize correctly", dod.getRandomPeriodicTableEntry());
        long count = periodicTableEntryService.countAllPeriodicTableEntrys();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<PeriodicTableEntry> result = periodicTableEntryService.findPeriodicTableEntryEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'PeriodicTableEntry' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'PeriodicTableEntry' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void PeriodicTableEntryIntegrationTest.testSavePeriodicTableEntry() {
        Assert.assertNotNull("Data on demand for 'PeriodicTableEntry' failed to initialize correctly", dod.getRandomPeriodicTableEntry());
        PeriodicTableEntry obj = dod.getNewTransientPeriodicTableEntry(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'PeriodicTableEntry' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'PeriodicTableEntry' identifier to be null", obj.getId());
        periodicTableEntryService.savePeriodicTableEntry(obj);
        Assert.assertNotNull("Expected 'PeriodicTableEntry' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void PeriodicTableEntryIntegrationTest.testDeletePeriodicTableEntry() {
        PeriodicTableEntry obj = dod.getRandomPeriodicTableEntry();
        Assert.assertNotNull("Data on demand for 'PeriodicTableEntry' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'PeriodicTableEntry' failed to provide an identifier", id);
        obj = periodicTableEntryService.findPeriodicTableEntry(id);
        periodicTableEntryService.deletePeriodicTableEntry(obj);
        Assert.assertNull("Failed to remove 'PeriodicTableEntry' with identifier '" + id + "'", periodicTableEntryService.findPeriodicTableEntry(id));
    }
    
}
