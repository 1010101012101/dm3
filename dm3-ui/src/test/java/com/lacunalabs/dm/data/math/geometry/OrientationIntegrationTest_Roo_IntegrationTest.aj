// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.data.math.geometry;

import com.lacunalabs.dm.data.math.geometry.OrientationDataOnDemand;
import com.lacunalabs.dm.data.math.geometry.OrientationIntegrationTest;
import com.lacunalabs.dm.data.repository.math.geometry.OrientationService;
import java.math.BigInteger;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

privileged aspect OrientationIntegrationTest_Roo_IntegrationTest {
    
    declare @type: OrientationIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: OrientationIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    @Autowired
    private OrientationDataOnDemand OrientationIntegrationTest.dod;
    
    @Autowired
    OrientationService OrientationIntegrationTest.orientationService;
    
    @Test
    public void OrientationIntegrationTest.testCountAllOrientations() {
        Assert.assertNotNull("Data on demand for 'Orientation' failed to initialize correctly", dod.getRandomOrientation());
        long count = orientationService.countAllOrientations();
        Assert.assertTrue("Counter for 'Orientation' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void OrientationIntegrationTest.testFindOrientation() {
        Orientation obj = dod.getRandomOrientation();
        Assert.assertNotNull("Data on demand for 'Orientation' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Orientation' failed to provide an identifier", id);
        obj = orientationService.findOrientation(id);
        Assert.assertNotNull("Find method for 'Orientation' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Orientation' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void OrientationIntegrationTest.testFindAllOrientations() {
        Assert.assertNotNull("Data on demand for 'Orientation' failed to initialize correctly", dod.getRandomOrientation());
        long count = orientationService.countAllOrientations();
        Assert.assertTrue("Too expensive to perform a find all test for 'Orientation', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Orientation> result = orientationService.findAllOrientations();
        Assert.assertNotNull("Find all method for 'Orientation' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Orientation' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void OrientationIntegrationTest.testFindOrientationEntries() {
        Assert.assertNotNull("Data on demand for 'Orientation' failed to initialize correctly", dod.getRandomOrientation());
        long count = orientationService.countAllOrientations();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Orientation> result = orientationService.findOrientationEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'Orientation' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Orientation' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void OrientationIntegrationTest.testSaveOrientation() {
        Assert.assertNotNull("Data on demand for 'Orientation' failed to initialize correctly", dod.getRandomOrientation());
        Orientation obj = dod.getNewTransientOrientation(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'Orientation' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'Orientation' identifier to be null", obj.getId());
        orientationService.saveOrientation(obj);
        Assert.assertNotNull("Expected 'Orientation' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void OrientationIntegrationTest.testDeleteOrientation() {
        Orientation obj = dod.getRandomOrientation();
        Assert.assertNotNull("Data on demand for 'Orientation' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Orientation' failed to provide an identifier", id);
        obj = orientationService.findOrientation(id);
        orientationService.deleteOrientation(obj);
        Assert.assertNull("Failed to remove 'Orientation' with identifier '" + id + "'", orientationService.findOrientation(id));
    }
    
}
