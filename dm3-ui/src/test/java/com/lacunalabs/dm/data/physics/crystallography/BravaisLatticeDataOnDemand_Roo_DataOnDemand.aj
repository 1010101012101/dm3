// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.data.physics.crystallography;

import com.lacunalabs.dm.data.physics.crystallography.BravaisLattice;
import com.lacunalabs.dm.data.physics.crystallography.BravaisLatticeDataOnDemand;
import com.lacunalabs.dm.data.physics.crystallography.CenteringDataOnDemand;
import com.lacunalabs.dm.data.repository.physics.crystallography.BravaisLatticeService;
import com.lacunalabs.dm.shared.physics.crystallography.CrystalSystemType;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect BravaisLatticeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BravaisLatticeDataOnDemand: @Component;
    
    private Random BravaisLatticeDataOnDemand.rnd = new SecureRandom();
    
    private List<BravaisLattice> BravaisLatticeDataOnDemand.data;
    
    @Autowired
    private CenteringDataOnDemand BravaisLatticeDataOnDemand.centeringDataOnDemand;
    
    @Autowired
    BravaisLatticeService BravaisLatticeDataOnDemand.bravaisLatticeService;
    
    public BravaisLattice BravaisLatticeDataOnDemand.getNewTransientBravaisLattice(int index) {
        BravaisLattice obj = new BravaisLattice();
        setA(obj, index);
        setAlpha(obj, index);
        setB(obj, index);
        setBeta(obj, index);
        setC(obj, index);
        setCrystalSystem(obj, index);
        setGamma(obj, index);
        return obj;
    }
    
    public void BravaisLatticeDataOnDemand.setA(BravaisLattice obj, int index) {
        BigDecimal a = BigDecimal.valueOf(index);
        if (a.compareTo(new BigDecimal("1.0E-16")) == -1 || a.compareTo(new BigDecimal("1.0E-6")) == 1) {
            a = new BigDecimal("1.0E-6");
        }
        obj.setA(a);
    }
    
    public void BravaisLatticeDataOnDemand.setAlpha(BravaisLattice obj, int index) {
        BigDecimal alpha = BigDecimal.valueOf(index);
        if (alpha.compareTo(new BigDecimal("-120")) == -1 || alpha.compareTo(new BigDecimal("120")) == 1) {
            alpha = new BigDecimal("120");
        }
        obj.setAlpha(alpha);
    }
    
    public void BravaisLatticeDataOnDemand.setB(BravaisLattice obj, int index) {
        BigDecimal b = BigDecimal.valueOf(index);
        if (b.compareTo(new BigDecimal("1.0E-16")) == -1 || b.compareTo(new BigDecimal("1.0E-6")) == 1) {
            b = new BigDecimal("1.0E-6");
        }
        obj.setB(b);
    }
    
    public void BravaisLatticeDataOnDemand.setBeta(BravaisLattice obj, int index) {
        BigDecimal beta = BigDecimal.valueOf(index);
        if (beta.compareTo(new BigDecimal("-120")) == -1 || beta.compareTo(new BigDecimal("120")) == 1) {
            beta = new BigDecimal("120");
        }
        obj.setBeta(beta);
    }
    
    public void BravaisLatticeDataOnDemand.setC(BravaisLattice obj, int index) {
        BigDecimal c = BigDecimal.valueOf(index);
        if (c.compareTo(new BigDecimal("1.0E-16")) == -1 || c.compareTo(new BigDecimal("1.0E-6")) == 1) {
            c = new BigDecimal("1.0E-6");
        }
        obj.setC(c);
    }
    
    public void BravaisLatticeDataOnDemand.setCrystalSystem(BravaisLattice obj, int index) {
        CrystalSystemType crystalSystem = CrystalSystemType.class.getEnumConstants()[0];
        obj.setCrystalSystem(crystalSystem);
    }
    
    public void BravaisLatticeDataOnDemand.setGamma(BravaisLattice obj, int index) {
        BigDecimal gamma = BigDecimal.valueOf(index);
        if (gamma.compareTo(new BigDecimal("-120")) == -1 || gamma.compareTo(new BigDecimal("120")) == 1) {
            gamma = new BigDecimal("120");
        }
        obj.setGamma(gamma);
    }
    
    public BravaisLattice BravaisLatticeDataOnDemand.getSpecificBravaisLattice(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        BravaisLattice obj = data.get(index);
        BigInteger id = obj.getId();
        return bravaisLatticeService.findBravaisLattice(id);
    }
    
    public BravaisLattice BravaisLatticeDataOnDemand.getRandomBravaisLattice() {
        init();
        BravaisLattice obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return bravaisLatticeService.findBravaisLattice(id);
    }
    
    public boolean BravaisLatticeDataOnDemand.modifyBravaisLattice(BravaisLattice obj) {
        return false;
    }
    
    public void BravaisLatticeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = bravaisLatticeService.findBravaisLatticeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'BravaisLattice' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<BravaisLattice>();
        for (int i = 0; i < 10; i++) {
            BravaisLattice obj = getNewTransientBravaisLattice(i);
            try {
                bravaisLatticeService.saveBravaisLattice(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
