// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.data.physics.instruments;

import com.lacunalabs.dm.data.physics.instruments.CcdCameraDataOnDemand;
import com.lacunalabs.dm.data.physics.instruments.CcdCameraIntegrationTest;
import com.lacunalabs.dm.data.repository.physics.instruments.CcdCameraService;
import java.math.BigInteger;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

privileged aspect CcdCameraIntegrationTest_Roo_IntegrationTest {
    
    declare @type: CcdCameraIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: CcdCameraIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    @Autowired
    private CcdCameraDataOnDemand CcdCameraIntegrationTest.dod;
    
    @Autowired
    CcdCameraService CcdCameraIntegrationTest.ccdCameraService;
    
    @Test
    public void CcdCameraIntegrationTest.testCountAllCcdCameras() {
        Assert.assertNotNull("Data on demand for 'CcdCamera' failed to initialize correctly", dod.getRandomCcdCamera());
        long count = ccdCameraService.countAllCcdCameras();
        Assert.assertTrue("Counter for 'CcdCamera' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void CcdCameraIntegrationTest.testFindCcdCamera() {
        CcdCamera obj = dod.getRandomCcdCamera();
        Assert.assertNotNull("Data on demand for 'CcdCamera' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'CcdCamera' failed to provide an identifier", id);
        obj = ccdCameraService.findCcdCamera(id);
        Assert.assertNotNull("Find method for 'CcdCamera' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'CcdCamera' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void CcdCameraIntegrationTest.testFindAllCcdCameras() {
        Assert.assertNotNull("Data on demand for 'CcdCamera' failed to initialize correctly", dod.getRandomCcdCamera());
        long count = ccdCameraService.countAllCcdCameras();
        Assert.assertTrue("Too expensive to perform a find all test for 'CcdCamera', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<CcdCamera> result = ccdCameraService.findAllCcdCameras();
        Assert.assertNotNull("Find all method for 'CcdCamera' illegally returned null", result);
        Assert.assertTrue("Find all method for 'CcdCamera' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void CcdCameraIntegrationTest.testFindCcdCameraEntries() {
        Assert.assertNotNull("Data on demand for 'CcdCamera' failed to initialize correctly", dod.getRandomCcdCamera());
        long count = ccdCameraService.countAllCcdCameras();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<CcdCamera> result = ccdCameraService.findCcdCameraEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'CcdCamera' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'CcdCamera' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void CcdCameraIntegrationTest.testSaveCcdCamera() {
        Assert.assertNotNull("Data on demand for 'CcdCamera' failed to initialize correctly", dod.getRandomCcdCamera());
        CcdCamera obj = dod.getNewTransientCcdCamera(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'CcdCamera' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'CcdCamera' identifier to be null", obj.getId());
        ccdCameraService.saveCcdCamera(obj);
        Assert.assertNotNull("Expected 'CcdCamera' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void CcdCameraIntegrationTest.testDeleteCcdCamera() {
        CcdCamera obj = dod.getRandomCcdCamera();
        Assert.assertNotNull("Data on demand for 'CcdCamera' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'CcdCamera' failed to provide an identifier", id);
        obj = ccdCameraService.findCcdCamera(id);
        ccdCameraService.deleteCcdCamera(obj);
        Assert.assertNull("Failed to remove 'CcdCamera' with identifier '" + id + "'", ccdCameraService.findCcdCamera(id));
    }
    
}
