// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.data.physics.fundamental;

import com.lacunalabs.dm.data.physics.fundamental.BaseUnitDataOnDemand;
import com.lacunalabs.dm.data.physics.fundamental.BaseUnitEnumerator;
import com.lacunalabs.dm.data.physics.fundamental.BaseUnitEnumeratorDataOnDemand;
import com.lacunalabs.dm.data.repository.physics.fundamental.BaseUnitEnumeratorService;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect BaseUnitEnumeratorDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BaseUnitEnumeratorDataOnDemand: @Component;
    
    private Random BaseUnitEnumeratorDataOnDemand.rnd = new SecureRandom();
    
    private List<BaseUnitEnumerator> BaseUnitEnumeratorDataOnDemand.data;
    
    @Autowired
    private BaseUnitDataOnDemand BaseUnitEnumeratorDataOnDemand.baseUnitDataOnDemand;
    
    @Autowired
    BaseUnitEnumeratorService BaseUnitEnumeratorDataOnDemand.baseUnitEnumeratorService;
    
    public BaseUnitEnumerator BaseUnitEnumeratorDataOnDemand.getNewTransientBaseUnitEnumerator(int index) {
        BaseUnitEnumerator obj = new BaseUnitEnumerator();
        setExponent(obj, index);
        setIdentifier(obj, index);
        setMultiplier(obj, index);
        setZeroOffset(obj, index);
        return obj;
    }
    
    public void BaseUnitEnumeratorDataOnDemand.setExponent(BaseUnitEnumerator obj, int index) {
        BigDecimal exponent = BigDecimal.valueOf(index);
        obj.setExponent(exponent);
    }
    
    public void BaseUnitEnumeratorDataOnDemand.setIdentifier(BaseUnitEnumerator obj, int index) {
        String identifier = "identifier_" + index;
        obj.setIdentifier(identifier);
    }
    
    public void BaseUnitEnumeratorDataOnDemand.setMultiplier(BaseUnitEnumerator obj, int index) {
        BigDecimal multiplier = BigDecimal.valueOf(index);
        obj.setMultiplier(multiplier);
    }
    
    public void BaseUnitEnumeratorDataOnDemand.setZeroOffset(BaseUnitEnumerator obj, int index) {
        BigDecimal zeroOffset = BigDecimal.valueOf(index);
        obj.setZeroOffset(zeroOffset);
    }
    
    public BaseUnitEnumerator BaseUnitEnumeratorDataOnDemand.getSpecificBaseUnitEnumerator(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        BaseUnitEnumerator obj = data.get(index);
        BigInteger id = obj.getId();
        return baseUnitEnumeratorService.findBaseUnitEnumerator(id);
    }
    
    public BaseUnitEnumerator BaseUnitEnumeratorDataOnDemand.getRandomBaseUnitEnumerator() {
        init();
        BaseUnitEnumerator obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return baseUnitEnumeratorService.findBaseUnitEnumerator(id);
    }
    
    public boolean BaseUnitEnumeratorDataOnDemand.modifyBaseUnitEnumerator(BaseUnitEnumerator obj) {
        return false;
    }
    
    public void BaseUnitEnumeratorDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = baseUnitEnumeratorService.findBaseUnitEnumeratorEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'BaseUnitEnumerator' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<BaseUnitEnumerator>();
        for (int i = 0; i < 10; i++) {
            BaseUnitEnumerator obj = getNewTransientBaseUnitEnumerator(i);
            try {
                baseUnitEnumeratorService.saveBaseUnitEnumerator(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
