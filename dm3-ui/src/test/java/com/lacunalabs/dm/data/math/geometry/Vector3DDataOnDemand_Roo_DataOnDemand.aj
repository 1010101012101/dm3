// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.data.math.geometry;

import com.lacunalabs.dm.data.math.geometry.Vector3D;
import com.lacunalabs.dm.data.math.geometry.Vector3DDataOnDemand;
import com.lacunalabs.dm.data.repository.math.geometry.Vector3DService;
import com.lacunalabs.dm.shared.math.geometry.VectorType;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect Vector3DDataOnDemand_Roo_DataOnDemand {
    
    declare @type: Vector3DDataOnDemand: @Component;
    
    private Random Vector3DDataOnDemand.rnd = new SecureRandom();
    
    private List<Vector3D> Vector3DDataOnDemand.data;
    
    @Autowired
    Vector3DService Vector3DDataOnDemand.vector3DService;
    
    public Vector3D Vector3DDataOnDemand.getNewTransientVector3D(int index) {
        Vector3D obj = new Vector3D();
        setVectorType(obj, index);
        setX(obj, index);
        setY(obj, index);
        setZ(obj, index);
        return obj;
    }
    
    public void Vector3DDataOnDemand.setVectorType(Vector3D obj, int index) {
        VectorType vectorType = VectorType.class.getEnumConstants()[0];
        obj.setVectorType(vectorType);
    }
    
    public void Vector3DDataOnDemand.setX(Vector3D obj, int index) {
        BigDecimal x = BigDecimal.valueOf(index);
        obj.setX(x);
    }
    
    public void Vector3DDataOnDemand.setY(Vector3D obj, int index) {
        BigDecimal y = BigDecimal.valueOf(index);
        obj.setY(y);
    }
    
    public void Vector3DDataOnDemand.setZ(Vector3D obj, int index) {
        BigDecimal z = BigDecimal.valueOf(index);
        obj.setZ(z);
    }
    
    public Vector3D Vector3DDataOnDemand.getSpecificVector3D(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Vector3D obj = data.get(index);
        BigInteger id = obj.getId();
        return vector3DService.findVector3D(id);
    }
    
    public Vector3D Vector3DDataOnDemand.getRandomVector3D() {
        init();
        Vector3D obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return vector3DService.findVector3D(id);
    }
    
    public boolean Vector3DDataOnDemand.modifyVector3D(Vector3D obj) {
        return false;
    }
    
    public void Vector3DDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = vector3DService.findVector3DEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Vector3D' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Vector3D>();
        for (int i = 0; i < 10; i++) {
            Vector3D obj = getNewTransientVector3D(i);
            try {
                vector3DService.saveVector3D(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
