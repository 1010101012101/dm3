// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.data.physics.experiment;

import com.lacunalabs.dm.data.math.geometry.OrientationDataOnDemand;
import com.lacunalabs.dm.data.math.geometry.Vector3DDataOnDemand;
import com.lacunalabs.dm.data.physics.experiment.TemExperiment;
import com.lacunalabs.dm.data.physics.experiment.TemExperimentDataOnDemand;
import com.lacunalabs.dm.data.physics.fundamental.ParticleBeamDataOnDemand;
import com.lacunalabs.dm.data.physics.instruments.AperatureDataOnDemand;
import com.lacunalabs.dm.data.physics.instruments.TemDataOnDemand;
import com.lacunalabs.dm.data.physics.instruments.TemObjectiveLensDataOnDemand;
import com.lacunalabs.dm.data.physics.solidstate.MaterialDataOnDemand;
import com.lacunalabs.dm.data.repository.physics.experiment.TemExperimentService;
import com.lacunalabs.dm.shared.physics.fundamental.MetaDataType;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TemExperimentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TemExperimentDataOnDemand: @Component;
    
    private Random TemExperimentDataOnDemand.rnd = new SecureRandom();
    
    private List<TemExperiment> TemExperimentDataOnDemand.data;
    
    @Autowired
    private AperatureDataOnDemand TemExperimentDataOnDemand.aperatureDataOnDemand;
    
    @Autowired
    private ParticleBeamDataOnDemand TemExperimentDataOnDemand.particleBeamDataOnDemand;
    
    @Autowired
    private OrientationDataOnDemand TemExperimentDataOnDemand.orientationDataOnDemand;
    
    @Autowired
    private TemObjectiveLensDataOnDemand TemExperimentDataOnDemand.temObjectiveLensDataOnDemand;
    
    @Autowired
    private MaterialDataOnDemand TemExperimentDataOnDemand.materialDataOnDemand;
    
    @Autowired
    private Vector3DDataOnDemand TemExperimentDataOnDemand.vector3DDataOnDemand;
    
    @Autowired
    private TemDataOnDemand TemExperimentDataOnDemand.temDataOnDemand;
    
    @Autowired
    TemExperimentService TemExperimentDataOnDemand.temExperimentService;
    
    public TemExperiment TemExperimentDataOnDemand.getNewTransientTemExperiment(int index) {
        TemExperiment obj = new TemExperiment();
        setAzimuth(obj, index);
        setCameraConstant(obj, index);
        setCameraLength(obj, index);
        setExposureTime(obj, index);
        setIdentifier(obj, index);
        setMetadata(obj, index);
        setMetadataType(obj, index);
        setSetByCameraLength(obj, index);
        setTilt(obj, index);
        return obj;
    }
    
    public void TemExperimentDataOnDemand.setAzimuth(TemExperiment obj, int index) {
        BigDecimal azimuth = BigDecimal.valueOf(index);
        obj.setAzimuth(azimuth);
    }
    
    public void TemExperimentDataOnDemand.setCameraConstant(TemExperiment obj, int index) {
        BigDecimal cameraConstant = BigDecimal.valueOf(index);
        obj.setCameraConstant(cameraConstant);
    }
    
    public void TemExperimentDataOnDemand.setCameraLength(TemExperiment obj, int index) {
        BigDecimal cameraLength = BigDecimal.valueOf(index);
        obj.setCameraLength(cameraLength);
    }
    
    public void TemExperimentDataOnDemand.setExposureTime(TemExperiment obj, int index) {
        BigDecimal exposureTime = BigDecimal.valueOf(index);
        obj.setExposureTime(exposureTime);
    }
    
    public void TemExperimentDataOnDemand.setIdentifier(TemExperiment obj, int index) {
        String identifier = "identifier_" + index;
        obj.setIdentifier(identifier);
    }
    
    public void TemExperimentDataOnDemand.setMetadata(TemExperiment obj, int index) {
        String metadata = "metadata_" + index;
        obj.setMetadata(metadata);
    }
    
    public void TemExperimentDataOnDemand.setMetadataType(TemExperiment obj, int index) {
        MetaDataType metadataType = MetaDataType.class.getEnumConstants()[0];
        obj.setMetadataType(metadataType);
    }
    
    public void TemExperimentDataOnDemand.setSetByCameraLength(TemExperiment obj, int index) {
        Boolean setByCameraLength = Boolean.TRUE;
        obj.setSetByCameraLength(setByCameraLength);
    }
    
    public void TemExperimentDataOnDemand.setTilt(TemExperiment obj, int index) {
        BigDecimal tilt = BigDecimal.valueOf(index);
        obj.setTilt(tilt);
    }
    
    public TemExperiment TemExperimentDataOnDemand.getSpecificTemExperiment(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        TemExperiment obj = data.get(index);
        BigInteger id = obj.getId();
        return temExperimentService.findTemExperiment(id);
    }
    
    public TemExperiment TemExperimentDataOnDemand.getRandomTemExperiment() {
        init();
        TemExperiment obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return temExperimentService.findTemExperiment(id);
    }
    
    public boolean TemExperimentDataOnDemand.modifyTemExperiment(TemExperiment obj) {
        return false;
    }
    
    public void TemExperimentDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = temExperimentService.findTemExperimentEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'TemExperiment' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<TemExperiment>();
        for (int i = 0; i < 10; i++) {
            TemExperiment obj = getNewTransientTemExperiment(i);
            try {
                temExperimentService.saveTemExperiment(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
