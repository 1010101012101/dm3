// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.data.math.geometry;

import com.lacunalabs.dm.data.math.geometry.Orientation;
import com.lacunalabs.dm.data.math.geometry.OrientationDataOnDemand;
import com.lacunalabs.dm.data.math.geometry.Vector3DDataOnDemand;
import com.lacunalabs.dm.data.repository.math.geometry.OrientationService;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect OrientationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: OrientationDataOnDemand: @Component;
    
    private Random OrientationDataOnDemand.rnd = new SecureRandom();
    
    private List<Orientation> OrientationDataOnDemand.data;
    
    @Autowired
    private Vector3DDataOnDemand OrientationDataOnDemand.vector3DDataOnDemand;
    
    @Autowired
    OrientationService OrientationDataOnDemand.orientationService;
    
    public Orientation OrientationDataOnDemand.getNewTransientOrientation(int index) {
        Orientation obj = new Orientation();
        setRotationAboutAspectY(obj, index);
        setRotationAboutZ(obj, index);
        return obj;
    }
    
    public void OrientationDataOnDemand.setRotationAboutAspectY(Orientation obj, int index) {
        BigDecimal rotationAboutAspectY = BigDecimal.valueOf(index);
        obj.setRotationAboutAspectY(rotationAboutAspectY);
    }
    
    public void OrientationDataOnDemand.setRotationAboutZ(Orientation obj, int index) {
        BigDecimal rotationAboutZ = BigDecimal.valueOf(index);
        obj.setRotationAboutZ(rotationAboutZ);
    }
    
    public Orientation OrientationDataOnDemand.getSpecificOrientation(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Orientation obj = data.get(index);
        BigInteger id = obj.getId();
        return orientationService.findOrientation(id);
    }
    
    public Orientation OrientationDataOnDemand.getRandomOrientation() {
        init();
        Orientation obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return orientationService.findOrientation(id);
    }
    
    public boolean OrientationDataOnDemand.modifyOrientation(Orientation obj) {
        return false;
    }
    
    public void OrientationDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = orientationService.findOrientationEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Orientation' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Orientation>();
        for (int i = 0; i < 10; i++) {
            Orientation obj = getNewTransientOrientation(i);
            try {
                orientationService.saveOrientation(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
