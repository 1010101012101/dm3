// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.data.physics.instruments;

import com.lacunalabs.dm.data.physics.instruments.LensPhysicalPropertyDataOnDemand;
import com.lacunalabs.dm.data.physics.instruments.LensPhysicalPropertyIntegrationTest;
import com.lacunalabs.dm.data.repository.physics.instruments.LensPhysicalPropertyService;
import java.math.BigInteger;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

privileged aspect LensPhysicalPropertyIntegrationTest_Roo_IntegrationTest {
    
    declare @type: LensPhysicalPropertyIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: LensPhysicalPropertyIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    @Autowired
    private LensPhysicalPropertyDataOnDemand LensPhysicalPropertyIntegrationTest.dod;
    
    @Autowired
    LensPhysicalPropertyService LensPhysicalPropertyIntegrationTest.lensPhysicalPropertyService;
    
    @Test
    public void LensPhysicalPropertyIntegrationTest.testCountAllLensPhysicalPropertys() {
        Assert.assertNotNull("Data on demand for 'LensPhysicalProperty' failed to initialize correctly", dod.getRandomLensPhysicalProperty());
        long count = lensPhysicalPropertyService.countAllLensPhysicalPropertys();
        Assert.assertTrue("Counter for 'LensPhysicalProperty' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void LensPhysicalPropertyIntegrationTest.testFindLensPhysicalProperty() {
        LensPhysicalProperty obj = dod.getRandomLensPhysicalProperty();
        Assert.assertNotNull("Data on demand for 'LensPhysicalProperty' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'LensPhysicalProperty' failed to provide an identifier", id);
        obj = lensPhysicalPropertyService.findLensPhysicalProperty(id);
        Assert.assertNotNull("Find method for 'LensPhysicalProperty' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'LensPhysicalProperty' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void LensPhysicalPropertyIntegrationTest.testFindAllLensPhysicalPropertys() {
        Assert.assertNotNull("Data on demand for 'LensPhysicalProperty' failed to initialize correctly", dod.getRandomLensPhysicalProperty());
        long count = lensPhysicalPropertyService.countAllLensPhysicalPropertys();
        Assert.assertTrue("Too expensive to perform a find all test for 'LensPhysicalProperty', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<LensPhysicalProperty> result = lensPhysicalPropertyService.findAllLensPhysicalPropertys();
        Assert.assertNotNull("Find all method for 'LensPhysicalProperty' illegally returned null", result);
        Assert.assertTrue("Find all method for 'LensPhysicalProperty' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void LensPhysicalPropertyIntegrationTest.testFindLensPhysicalPropertyEntries() {
        Assert.assertNotNull("Data on demand for 'LensPhysicalProperty' failed to initialize correctly", dod.getRandomLensPhysicalProperty());
        long count = lensPhysicalPropertyService.countAllLensPhysicalPropertys();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<LensPhysicalProperty> result = lensPhysicalPropertyService.findLensPhysicalPropertyEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'LensPhysicalProperty' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'LensPhysicalProperty' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void LensPhysicalPropertyIntegrationTest.testSaveLensPhysicalProperty() {
        Assert.assertNotNull("Data on demand for 'LensPhysicalProperty' failed to initialize correctly", dod.getRandomLensPhysicalProperty());
        LensPhysicalProperty obj = dod.getNewTransientLensPhysicalProperty(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'LensPhysicalProperty' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'LensPhysicalProperty' identifier to be null", obj.getId());
        lensPhysicalPropertyService.saveLensPhysicalProperty(obj);
        Assert.assertNotNull("Expected 'LensPhysicalProperty' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void LensPhysicalPropertyIntegrationTest.testDeleteLensPhysicalProperty() {
        LensPhysicalProperty obj = dod.getRandomLensPhysicalProperty();
        Assert.assertNotNull("Data on demand for 'LensPhysicalProperty' failed to initialize correctly", obj);
        BigInteger id = obj.getId();
        Assert.assertNotNull("Data on demand for 'LensPhysicalProperty' failed to provide an identifier", id);
        obj = lensPhysicalPropertyService.findLensPhysicalProperty(id);
        lensPhysicalPropertyService.deleteLensPhysicalProperty(obj);
        Assert.assertNull("Failed to remove 'LensPhysicalProperty' with identifier '" + id + "'", lensPhysicalPropertyService.findLensPhysicalProperty(id));
    }
    
}
