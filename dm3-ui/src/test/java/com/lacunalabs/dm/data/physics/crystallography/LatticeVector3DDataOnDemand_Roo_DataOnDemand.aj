// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.data.physics.crystallography;

import com.lacunalabs.dm.data.physics.crystallography.LatticeVector3D;
import com.lacunalabs.dm.data.physics.crystallography.LatticeVector3DDataOnDemand;
import com.lacunalabs.dm.data.physics.crystallography.UnitCellDataOnDemand;
import com.lacunalabs.dm.data.repository.physics.crystallography.LatticeVector3DService;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect LatticeVector3DDataOnDemand_Roo_DataOnDemand {
    
    declare @type: LatticeVector3DDataOnDemand: @Component;
    
    private Random LatticeVector3DDataOnDemand.rnd = new SecureRandom();
    
    private List<LatticeVector3D> LatticeVector3DDataOnDemand.data;
    
    @Autowired
    private UnitCellDataOnDemand LatticeVector3DDataOnDemand.unitCellDataOnDemand;
    
    @Autowired
    LatticeVector3DService LatticeVector3DDataOnDemand.latticeVector3DService;
    
    public LatticeVector3D LatticeVector3DDataOnDemand.getNewTransientLatticeVector3D(int index) {
        LatticeVector3D obj = new LatticeVector3D();
        setX(obj, index);
        setY(obj, index);
        setZ(obj, index);
        return obj;
    }
    
    public void LatticeVector3DDataOnDemand.setX(LatticeVector3D obj, int index) {
        BigDecimal x = BigDecimal.valueOf(index);
        obj.setX(x);
    }
    
    public void LatticeVector3DDataOnDemand.setY(LatticeVector3D obj, int index) {
        BigDecimal y = BigDecimal.valueOf(index);
        obj.setY(y);
    }
    
    public void LatticeVector3DDataOnDemand.setZ(LatticeVector3D obj, int index) {
        BigDecimal z = BigDecimal.valueOf(index);
        obj.setZ(z);
    }
    
    public LatticeVector3D LatticeVector3DDataOnDemand.getSpecificLatticeVector3D(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        LatticeVector3D obj = data.get(index);
        BigInteger id = obj.getId();
        return latticeVector3DService.findLatticeVector3D(id);
    }
    
    public LatticeVector3D LatticeVector3DDataOnDemand.getRandomLatticeVector3D() {
        init();
        LatticeVector3D obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return latticeVector3DService.findLatticeVector3D(id);
    }
    
    public boolean LatticeVector3DDataOnDemand.modifyLatticeVector3D(LatticeVector3D obj) {
        return false;
    }
    
    public void LatticeVector3DDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = latticeVector3DService.findLatticeVector3DEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'LatticeVector3D' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<LatticeVector3D>();
        for (int i = 0; i < 10; i++) {
            LatticeVector3D obj = getNewTransientLatticeVector3D(i);
            try {
                latticeVector3DService.saveLatticeVector3D(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
