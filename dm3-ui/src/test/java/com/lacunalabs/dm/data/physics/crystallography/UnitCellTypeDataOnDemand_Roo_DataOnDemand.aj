// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.data.physics.crystallography;

import com.lacunalabs.dm.data.physics.crystallography.UnitCellType;
import com.lacunalabs.dm.data.physics.crystallography.UnitCellTypeDataOnDemand;
import com.lacunalabs.dm.data.repository.physics.crystallography.UnitCellTypeService;
import com.lacunalabs.dm.shared.physics.crystallography.CrystalIdentifierType;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect UnitCellTypeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UnitCellTypeDataOnDemand: @Component;
    
    private Random UnitCellTypeDataOnDemand.rnd = new SecureRandom();
    
    private List<UnitCellType> UnitCellTypeDataOnDemand.data;
    
    @Autowired
    UnitCellTypeService UnitCellTypeDataOnDemand.unitCellTypeService;
    
    public UnitCellType UnitCellTypeDataOnDemand.getNewTransientUnitCellType(int index) {
        UnitCellType obj = new UnitCellType();
        setDesignation(obj, index);
        setType(obj, index);
        return obj;
    }
    
    public void UnitCellTypeDataOnDemand.setDesignation(UnitCellType obj, int index) {
        String designation = "designation_" + index;
        obj.setDesignation(designation);
    }
    
    public void UnitCellTypeDataOnDemand.setType(UnitCellType obj, int index) {
        CrystalIdentifierType type = CrystalIdentifierType.class.getEnumConstants()[0];
        obj.setType(type);
    }
    
    public UnitCellType UnitCellTypeDataOnDemand.getSpecificUnitCellType(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UnitCellType obj = data.get(index);
        BigInteger id = obj.getId();
        return unitCellTypeService.findUnitCellType(id);
    }
    
    public UnitCellType UnitCellTypeDataOnDemand.getRandomUnitCellType() {
        init();
        UnitCellType obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return unitCellTypeService.findUnitCellType(id);
    }
    
    public boolean UnitCellTypeDataOnDemand.modifyUnitCellType(UnitCellType obj) {
        return false;
    }
    
    public void UnitCellTypeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = unitCellTypeService.findUnitCellTypeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UnitCellType' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UnitCellType>();
        for (int i = 0; i < 10; i++) {
            UnitCellType obj = getNewTransientUnitCellType(i);
            try {
                unitCellTypeService.saveUnitCellType(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
