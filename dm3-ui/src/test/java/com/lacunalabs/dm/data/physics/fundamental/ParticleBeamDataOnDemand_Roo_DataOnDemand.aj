// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.data.physics.fundamental;

import com.lacunalabs.dm.data.math.geometry.Vector3DDataOnDemand;
import com.lacunalabs.dm.data.physics.fundamental.CompositeParticleDataOnDemand;
import com.lacunalabs.dm.data.physics.fundamental.ParticleBeam;
import com.lacunalabs.dm.data.physics.fundamental.ParticleBeamDataOnDemand;
import com.lacunalabs.dm.data.repository.physics.fundamental.ParticleBeamService;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ParticleBeamDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ParticleBeamDataOnDemand: @Component;
    
    private Random ParticleBeamDataOnDemand.rnd = new SecureRandom();
    
    private List<ParticleBeam> ParticleBeamDataOnDemand.data;
    
    @Autowired
    private Vector3DDataOnDemand ParticleBeamDataOnDemand.vector3DDataOnDemand;
    
    @Autowired
    private CompositeParticleDataOnDemand ParticleBeamDataOnDemand.compositeParticleDataOnDemand;
    
    @Autowired
    ParticleBeamService ParticleBeamDataOnDemand.particleBeamService;
    
    public ParticleBeam ParticleBeamDataOnDemand.getNewTransientParticleBeam(int index) {
        ParticleBeam obj = new ParticleBeam();
        setIntensity(obj, index);
        setSetByWavelength(obj, index);
        setVoltage(obj, index);
        setWavelength(obj, index);
        return obj;
    }
    
    public void ParticleBeamDataOnDemand.setIntensity(ParticleBeam obj, int index) {
        BigDecimal intensity = BigDecimal.valueOf(index);
        obj.setIntensity(intensity);
    }
    
    public void ParticleBeamDataOnDemand.setSetByWavelength(ParticleBeam obj, int index) {
        Boolean setByWavelength = Boolean.TRUE;
        obj.setSetByWavelength(setByWavelength);
    }
    
    public void ParticleBeamDataOnDemand.setVoltage(ParticleBeam obj, int index) {
        BigDecimal voltage = BigDecimal.valueOf(index);
        obj.setVoltage(voltage);
    }
    
    public void ParticleBeamDataOnDemand.setWavelength(ParticleBeam obj, int index) {
        BigDecimal wavelength = BigDecimal.valueOf(index);
        obj.setWavelength(wavelength);
    }
    
    public ParticleBeam ParticleBeamDataOnDemand.getSpecificParticleBeam(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ParticleBeam obj = data.get(index);
        BigInteger id = obj.getId();
        return particleBeamService.findParticleBeam(id);
    }
    
    public ParticleBeam ParticleBeamDataOnDemand.getRandomParticleBeam() {
        init();
        ParticleBeam obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return particleBeamService.findParticleBeam(id);
    }
    
    public boolean ParticleBeamDataOnDemand.modifyParticleBeam(ParticleBeam obj) {
        return false;
    }
    
    public void ParticleBeamDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = particleBeamService.findParticleBeamEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ParticleBeam' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ParticleBeam>();
        for (int i = 0; i < 10; i++) {
            ParticleBeam obj = getNewTransientParticleBeam(i);
            try {
                particleBeamService.saveParticleBeam(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
