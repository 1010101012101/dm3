// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.data.physics.instruments;

import com.lacunalabs.dm.data.physics.fundamental.PhysicalPropertyTypeDataOnDemand;
import com.lacunalabs.dm.data.physics.instruments.LensPhysicalProperty;
import com.lacunalabs.dm.data.physics.instruments.LensPhysicalPropertyDataOnDemand;
import com.lacunalabs.dm.data.physics.instruments.TemObjectiveLensDataOnDemand;
import com.lacunalabs.dm.data.repository.physics.instruments.LensPhysicalPropertyService;
import com.lacunalabs.dm.shared.physics.fundamental.UncertaintyType;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect LensPhysicalPropertyDataOnDemand_Roo_DataOnDemand {
    
    declare @type: LensPhysicalPropertyDataOnDemand: @Component;
    
    private Random LensPhysicalPropertyDataOnDemand.rnd = new SecureRandom();
    
    private List<LensPhysicalProperty> LensPhysicalPropertyDataOnDemand.data;
    
    @Autowired
    private TemObjectiveLensDataOnDemand LensPhysicalPropertyDataOnDemand.temObjectiveLensDataOnDemand;
    
    @Autowired
    private PhysicalPropertyTypeDataOnDemand LensPhysicalPropertyDataOnDemand.physicalPropertyTypeDataOnDemand;
    
    @Autowired
    LensPhysicalPropertyService LensPhysicalPropertyDataOnDemand.lensPhysicalPropertyService;
    
    public LensPhysicalProperty LensPhysicalPropertyDataOnDemand.getNewTransientLensPhysicalProperty(int index) {
        LensPhysicalProperty obj = new LensPhysicalProperty();
        setFunctionParameters(obj, index);
        setName(obj, index);
        setQuantity(obj, index);
        setUncertainty(obj, index);
        setUncertaintyType(obj, index);
        return obj;
    }
    
    public void LensPhysicalPropertyDataOnDemand.setFunctionParameters(LensPhysicalProperty obj, int index) {
        String functionParameters = "functionParameters_" + index;
        obj.setFunctionParameters(functionParameters);
    }
    
    public void LensPhysicalPropertyDataOnDemand.setName(LensPhysicalProperty obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void LensPhysicalPropertyDataOnDemand.setQuantity(LensPhysicalProperty obj, int index) {
        BigDecimal quantity = BigDecimal.valueOf(index);
        obj.setQuantity(quantity);
    }
    
    public void LensPhysicalPropertyDataOnDemand.setUncertainty(LensPhysicalProperty obj, int index) {
        BigDecimal uncertainty = BigDecimal.valueOf(index);
        obj.setUncertainty(uncertainty);
    }
    
    public void LensPhysicalPropertyDataOnDemand.setUncertaintyType(LensPhysicalProperty obj, int index) {
        UncertaintyType uncertaintyType = UncertaintyType.class.getEnumConstants()[0];
        obj.setUncertaintyType(uncertaintyType);
    }
    
    public LensPhysicalProperty LensPhysicalPropertyDataOnDemand.getSpecificLensPhysicalProperty(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        LensPhysicalProperty obj = data.get(index);
        BigInteger id = obj.getId();
        return lensPhysicalPropertyService.findLensPhysicalProperty(id);
    }
    
    public LensPhysicalProperty LensPhysicalPropertyDataOnDemand.getRandomLensPhysicalProperty() {
        init();
        LensPhysicalProperty obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return lensPhysicalPropertyService.findLensPhysicalProperty(id);
    }
    
    public boolean LensPhysicalPropertyDataOnDemand.modifyLensPhysicalProperty(LensPhysicalProperty obj) {
        return false;
    }
    
    public void LensPhysicalPropertyDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = lensPhysicalPropertyService.findLensPhysicalPropertyEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'LensPhysicalProperty' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<LensPhysicalProperty>();
        for (int i = 0; i < 10; i++) {
            LensPhysicalProperty obj = getNewTransientLensPhysicalProperty(i);
            try {
                lensPhysicalPropertyService.saveLensPhysicalProperty(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
