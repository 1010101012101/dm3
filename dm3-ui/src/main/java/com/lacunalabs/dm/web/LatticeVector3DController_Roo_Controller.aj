// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.web;

import com.lacunalabs.dm.data.physics.crystallography.LatticeVector3D;
import com.lacunalabs.dm.data.repository.physics.crystallography.LatticeVector3DService;
import com.lacunalabs.dm.data.repository.physics.crystallography.UnitCellService;
import com.lacunalabs.dm.web.LatticeVector3DController;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect LatticeVector3DController_Roo_Controller {
    
    @Autowired
    LatticeVector3DService LatticeVector3DController.latticeVector3DService;
    
    @Autowired
    UnitCellService LatticeVector3DController.unitCellService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String LatticeVector3DController.create(@Valid LatticeVector3D latticeVector3D, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, latticeVector3D);
            return "latticevector3ds/create";
        }
        uiModel.asMap().clear();
        latticeVector3DService.saveLatticeVector3D(latticeVector3D);
        return "redirect:/latticevector3ds/" + encodeUrlPathSegment(latticeVector3D.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String LatticeVector3DController.createForm(Model uiModel) {
        populateEditForm(uiModel, new LatticeVector3D());
        return "latticevector3ds/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String LatticeVector3DController.show(@PathVariable("id") BigInteger id, Model uiModel) {
        uiModel.addAttribute("latticevector3d", latticeVector3DService.findLatticeVector3D(id));
        uiModel.addAttribute("itemId", id);
        return "latticevector3ds/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String LatticeVector3DController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("latticevector3ds", latticeVector3DService.findLatticeVector3DEntries(firstResult, sizeNo));
            float nrOfPages = (float) latticeVector3DService.countAllLatticeVector3Ds() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("latticevector3ds", latticeVector3DService.findAllLatticeVector3Ds());
        }
        return "latticevector3ds/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String LatticeVector3DController.update(@Valid LatticeVector3D latticeVector3D, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, latticeVector3D);
            return "latticevector3ds/update";
        }
        uiModel.asMap().clear();
        latticeVector3DService.updateLatticeVector3D(latticeVector3D);
        return "redirect:/latticevector3ds/" + encodeUrlPathSegment(latticeVector3D.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String LatticeVector3DController.updateForm(@PathVariable("id") BigInteger id, Model uiModel) {
        populateEditForm(uiModel, latticeVector3DService.findLatticeVector3D(id));
        return "latticevector3ds/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String LatticeVector3DController.delete(@PathVariable("id") BigInteger id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        LatticeVector3D latticeVector3D = latticeVector3DService.findLatticeVector3D(id);
        latticeVector3DService.deleteLatticeVector3D(latticeVector3D);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/latticevector3ds";
    }
    
    void LatticeVector3DController.populateEditForm(Model uiModel, LatticeVector3D latticeVector3D) {
        uiModel.addAttribute("latticeVector3D", latticeVector3D);
        uiModel.addAttribute("unitcells", unitCellService.findAllUnitCells());
    }
    
    String LatticeVector3DController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
