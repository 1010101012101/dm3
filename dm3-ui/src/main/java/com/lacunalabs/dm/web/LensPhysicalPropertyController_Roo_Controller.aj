// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.web;

import com.lacunalabs.dm.data.physics.instruments.LensPhysicalProperty;
import com.lacunalabs.dm.data.repository.physics.fundamental.PhysicalPropertyTypeService;
import com.lacunalabs.dm.data.repository.physics.instruments.LensPhysicalPropertyService;
import com.lacunalabs.dm.data.repository.physics.instruments.TemObjectiveLensService;
import com.lacunalabs.dm.shared.physics.fundamental.UncertaintyType;
import com.lacunalabs.dm.web.LensPhysicalPropertyController;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.util.Arrays;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect LensPhysicalPropertyController_Roo_Controller {
    
    @Autowired
    LensPhysicalPropertyService LensPhysicalPropertyController.lensPhysicalPropertyService;
    
    @Autowired
    PhysicalPropertyTypeService LensPhysicalPropertyController.physicalPropertyTypeService;
    
    @Autowired
    TemObjectiveLensService LensPhysicalPropertyController.temObjectiveLensService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String LensPhysicalPropertyController.create(@Valid LensPhysicalProperty lensPhysicalProperty, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, lensPhysicalProperty);
            return "lensphysicalpropertys/create";
        }
        uiModel.asMap().clear();
        lensPhysicalPropertyService.saveLensPhysicalProperty(lensPhysicalProperty);
        return "redirect:/lensphysicalpropertys/" + encodeUrlPathSegment(lensPhysicalProperty.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String LensPhysicalPropertyController.createForm(Model uiModel) {
        populateEditForm(uiModel, new LensPhysicalProperty());
        return "lensphysicalpropertys/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String LensPhysicalPropertyController.show(@PathVariable("id") BigInteger id, Model uiModel) {
        uiModel.addAttribute("lensphysicalproperty", lensPhysicalPropertyService.findLensPhysicalProperty(id));
        uiModel.addAttribute("itemId", id);
        return "lensphysicalpropertys/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String LensPhysicalPropertyController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("lensphysicalpropertys", lensPhysicalPropertyService.findLensPhysicalPropertyEntries(firstResult, sizeNo));
            float nrOfPages = (float) lensPhysicalPropertyService.countAllLensPhysicalPropertys() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("lensphysicalpropertys", lensPhysicalPropertyService.findAllLensPhysicalPropertys());
        }
        return "lensphysicalpropertys/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String LensPhysicalPropertyController.update(@Valid LensPhysicalProperty lensPhysicalProperty, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, lensPhysicalProperty);
            return "lensphysicalpropertys/update";
        }
        uiModel.asMap().clear();
        lensPhysicalPropertyService.updateLensPhysicalProperty(lensPhysicalProperty);
        return "redirect:/lensphysicalpropertys/" + encodeUrlPathSegment(lensPhysicalProperty.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String LensPhysicalPropertyController.updateForm(@PathVariable("id") BigInteger id, Model uiModel) {
        populateEditForm(uiModel, lensPhysicalPropertyService.findLensPhysicalProperty(id));
        return "lensphysicalpropertys/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String LensPhysicalPropertyController.delete(@PathVariable("id") BigInteger id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        LensPhysicalProperty lensPhysicalProperty = lensPhysicalPropertyService.findLensPhysicalProperty(id);
        lensPhysicalPropertyService.deleteLensPhysicalProperty(lensPhysicalProperty);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/lensphysicalpropertys";
    }
    
    void LensPhysicalPropertyController.populateEditForm(Model uiModel, LensPhysicalProperty lensPhysicalProperty) {
        uiModel.addAttribute("lensPhysicalProperty", lensPhysicalProperty);
        uiModel.addAttribute("physicalpropertytypes", physicalPropertyTypeService.findAllPhysicalPropertyTypes());
        uiModel.addAttribute("temobjectivelenses", temObjectiveLensService.findAllTemObjectiveLenses());
        uiModel.addAttribute("uncertaintytypes", Arrays.asList(UncertaintyType.values()));
    }
    
    String LensPhysicalPropertyController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
