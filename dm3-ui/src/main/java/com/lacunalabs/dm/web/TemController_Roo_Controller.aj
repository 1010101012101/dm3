// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.web;

import com.lacunalabs.dm.data.physics.instruments.Tem;
import com.lacunalabs.dm.data.repository.physics.instruments.AperatureService;
import com.lacunalabs.dm.data.repository.physics.instruments.CcdCameraService;
import com.lacunalabs.dm.data.repository.physics.instruments.TemDoubleTiltHolderService;
import com.lacunalabs.dm.data.repository.physics.instruments.TemObjectiveLensService;
import com.lacunalabs.dm.data.repository.physics.instruments.TemService;
import com.lacunalabs.dm.shared.physics.fundamental.MetaDataType;
import com.lacunalabs.dm.web.TemController;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.util.Arrays;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect TemController_Roo_Controller {
    
    @Autowired
    TemService TemController.temService;
    
    @Autowired
    AperatureService TemController.aperatureService;
    
    @Autowired
    CcdCameraService TemController.ccdCameraService;
    
    @Autowired
    TemDoubleTiltHolderService TemController.temDoubleTiltHolderService;
    
    @Autowired
    TemObjectiveLensService TemController.temObjectiveLensService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String TemController.create(@Valid Tem tem, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, tem);
            return "tems/create";
        }
        uiModel.asMap().clear();
        temService.saveTem(tem);
        return "redirect:/tems/" + encodeUrlPathSegment(tem.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String TemController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Tem());
        return "tems/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String TemController.show(@PathVariable("id") BigInteger id, Model uiModel) {
        uiModel.addAttribute("tem", temService.findTem(id));
        uiModel.addAttribute("itemId", id);
        return "tems/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String TemController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("tems", temService.findTemEntries(firstResult, sizeNo));
            float nrOfPages = (float) temService.countAllTems() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("tems", temService.findAllTems());
        }
        return "tems/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String TemController.update(@Valid Tem tem, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, tem);
            return "tems/update";
        }
        uiModel.asMap().clear();
        temService.updateTem(tem);
        return "redirect:/tems/" + encodeUrlPathSegment(tem.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String TemController.updateForm(@PathVariable("id") BigInteger id, Model uiModel) {
        populateEditForm(uiModel, temService.findTem(id));
        return "tems/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String TemController.delete(@PathVariable("id") BigInteger id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Tem tem = temService.findTem(id);
        temService.deleteTem(tem);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/tems";
    }
    
    void TemController.populateEditForm(Model uiModel, Tem tem) {
        uiModel.addAttribute("tem", tem);
        uiModel.addAttribute("aperatures", aperatureService.findAllAperatures());
        uiModel.addAttribute("ccdcameras", ccdCameraService.findAllCcdCameras());
        uiModel.addAttribute("temdoubletiltholders", temDoubleTiltHolderService.findAllTemDoubleTiltHolders());
        uiModel.addAttribute("temobjectivelenses", temObjectiveLensService.findAllTemObjectiveLenses());
        uiModel.addAttribute("metadatatypes", Arrays.asList(MetaDataType.values()));
    }
    
    String TemController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
