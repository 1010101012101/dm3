// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.web;

import com.lacunalabs.dm.data.physics.solidstate.MaterialComponentOrientations;
import com.lacunalabs.dm.data.repository.math.geometry.OrientationRelationshipService;
import com.lacunalabs.dm.data.repository.physics.solidstate.MaterialComponentOrientationsService;
import com.lacunalabs.dm.data.repository.physics.solidstate.MaterialComponentService;
import com.lacunalabs.dm.web.MaterialComponentOrientationsController;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect MaterialComponentOrientationsController_Roo_Controller {
    
    @Autowired
    MaterialComponentOrientationsService MaterialComponentOrientationsController.materialComponentOrientationsService;
    
    @Autowired
    OrientationRelationshipService MaterialComponentOrientationsController.orientationRelationshipService;
    
    @Autowired
    MaterialComponentService MaterialComponentOrientationsController.materialComponentService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String MaterialComponentOrientationsController.create(@Valid MaterialComponentOrientations materialComponentOrientations, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, materialComponentOrientations);
            return "materialcomponentorientationses/create";
        }
        uiModel.asMap().clear();
        materialComponentOrientationsService.saveMaterialComponentOrientations(materialComponentOrientations);
        return "redirect:/materialcomponentorientationses/" + encodeUrlPathSegment(materialComponentOrientations.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String MaterialComponentOrientationsController.createForm(Model uiModel) {
        populateEditForm(uiModel, new MaterialComponentOrientations());
        return "materialcomponentorientationses/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String MaterialComponentOrientationsController.show(@PathVariable("id") BigInteger id, Model uiModel) {
        uiModel.addAttribute("materialcomponentorientations", materialComponentOrientationsService.findMaterialComponentOrientations(id));
        uiModel.addAttribute("itemId", id);
        return "materialcomponentorientationses/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String MaterialComponentOrientationsController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("materialcomponentorientationses", materialComponentOrientationsService.findMaterialComponentOrientationsEntries(firstResult, sizeNo));
            float nrOfPages = (float) materialComponentOrientationsService.countAllMaterialComponentOrientationses() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("materialcomponentorientationses", materialComponentOrientationsService.findAllMaterialComponentOrientationses());
        }
        return "materialcomponentorientationses/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String MaterialComponentOrientationsController.update(@Valid MaterialComponentOrientations materialComponentOrientations, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, materialComponentOrientations);
            return "materialcomponentorientationses/update";
        }
        uiModel.asMap().clear();
        materialComponentOrientationsService.updateMaterialComponentOrientations(materialComponentOrientations);
        return "redirect:/materialcomponentorientationses/" + encodeUrlPathSegment(materialComponentOrientations.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String MaterialComponentOrientationsController.updateForm(@PathVariable("id") BigInteger id, Model uiModel) {
        populateEditForm(uiModel, materialComponentOrientationsService.findMaterialComponentOrientations(id));
        return "materialcomponentorientationses/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String MaterialComponentOrientationsController.delete(@PathVariable("id") BigInteger id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        MaterialComponentOrientations materialComponentOrientations = materialComponentOrientationsService.findMaterialComponentOrientations(id);
        materialComponentOrientationsService.deleteMaterialComponentOrientations(materialComponentOrientations);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/materialcomponentorientationses";
    }
    
    void MaterialComponentOrientationsController.populateEditForm(Model uiModel, MaterialComponentOrientations materialComponentOrientations) {
        uiModel.addAttribute("materialComponentOrientations", materialComponentOrientations);
        uiModel.addAttribute("orientationrelationships", orientationRelationshipService.findAllOrientationRelationships());
        uiModel.addAttribute("materialcomponents", materialComponentService.findAllMaterialComponents());
    }
    
    String MaterialComponentOrientationsController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
