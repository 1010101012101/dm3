// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.web;

import com.lacunalabs.dm.data.math.geometry.Shape3D;
import com.lacunalabs.dm.data.repository.math.geometry.Shape3DService;
import com.lacunalabs.dm.data.repository.math.geometry.Vector3DService;
import com.lacunalabs.dm.web.Shape3DController;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect Shape3DController_Roo_Controller {
    
    @Autowired
    Shape3DService Shape3DController.shape3DService;
    
    @Autowired
    Vector3DService Shape3DController.vector3DService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String Shape3DController.create(@Valid Shape3D shape3D, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, shape3D);
            return "shape3ds/create";
        }
        uiModel.asMap().clear();
        shape3DService.saveShape3D(shape3D);
        return "redirect:/shape3ds/" + encodeUrlPathSegment(shape3D.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String Shape3DController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Shape3D());
        return "shape3ds/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String Shape3DController.show(@PathVariable("id") BigInteger id, Model uiModel) {
        uiModel.addAttribute("shape3d", shape3DService.findShape3D(id));
        uiModel.addAttribute("itemId", id);
        return "shape3ds/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String Shape3DController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("shape3ds", shape3DService.findShape3DEntries(firstResult, sizeNo));
            float nrOfPages = (float) shape3DService.countAllShape3Ds() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("shape3ds", shape3DService.findAllShape3Ds());
        }
        return "shape3ds/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String Shape3DController.update(@Valid Shape3D shape3D, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, shape3D);
            return "shape3ds/update";
        }
        uiModel.asMap().clear();
        shape3DService.updateShape3D(shape3D);
        return "redirect:/shape3ds/" + encodeUrlPathSegment(shape3D.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String Shape3DController.updateForm(@PathVariable("id") BigInteger id, Model uiModel) {
        populateEditForm(uiModel, shape3DService.findShape3D(id));
        return "shape3ds/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String Shape3DController.delete(@PathVariable("id") BigInteger id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Shape3D shape3D = shape3DService.findShape3D(id);
        shape3DService.deleteShape3D(shape3D);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/shape3ds";
    }
    
    void Shape3DController.populateEditForm(Model uiModel, Shape3D shape3D) {
        uiModel.addAttribute("shape3D", shape3D);
        uiModel.addAttribute("vector3ds", vector3DService.findAllVector3Ds());
    }
    
    String Shape3DController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
