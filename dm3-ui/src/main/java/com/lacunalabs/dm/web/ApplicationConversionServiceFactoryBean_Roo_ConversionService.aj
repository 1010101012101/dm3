// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.web;

import com.lacunalabs.dm.data.math.geometry.Orientation;
import com.lacunalabs.dm.data.math.geometry.OrientationRelationship;
import com.lacunalabs.dm.data.math.geometry.Shape2D;
import com.lacunalabs.dm.data.math.geometry.Shape3D;
import com.lacunalabs.dm.data.math.geometry.Vector2D;
import com.lacunalabs.dm.data.math.geometry.Vector3D;
import com.lacunalabs.dm.data.physics.crystallography.AtomicPosition;
import com.lacunalabs.dm.data.physics.crystallography.BravaisLattice;
import com.lacunalabs.dm.data.physics.crystallography.Centering;
import com.lacunalabs.dm.data.physics.crystallography.LatticeVector3D;
import com.lacunalabs.dm.data.physics.crystallography.PointGroup;
import com.lacunalabs.dm.data.physics.crystallography.ReflectionCondition;
import com.lacunalabs.dm.data.physics.crystallography.SpaceGroup;
import com.lacunalabs.dm.data.physics.crystallography.UnitCell;
import com.lacunalabs.dm.data.physics.crystallography.UnitCellPhysicalProperty;
import com.lacunalabs.dm.data.physics.crystallography.UnitCellType;
import com.lacunalabs.dm.data.physics.experiment.Processor;
import com.lacunalabs.dm.data.physics.experiment.TemExperiment;
import com.lacunalabs.dm.data.physics.fundamental.BaseUnit;
import com.lacunalabs.dm.data.physics.fundamental.BaseUnitEnumerator;
import com.lacunalabs.dm.data.physics.fundamental.CompositeParticle;
import com.lacunalabs.dm.data.physics.fundamental.DecimalMultiplier;
import com.lacunalabs.dm.data.physics.fundamental.Particle;
import com.lacunalabs.dm.data.physics.fundamental.ParticleBeam;
import com.lacunalabs.dm.data.physics.fundamental.ParticleEnumerator;
import com.lacunalabs.dm.data.physics.fundamental.ParticlePhysicalProperty;
import com.lacunalabs.dm.data.physics.fundamental.PeriodicTable;
import com.lacunalabs.dm.data.physics.fundamental.PeriodicTableEntry;
import com.lacunalabs.dm.data.physics.fundamental.PhysicalConstant;
import com.lacunalabs.dm.data.physics.fundamental.PhysicalPropertyType;
import com.lacunalabs.dm.data.physics.fundamental.PhysicalPropertyTypeField;
import com.lacunalabs.dm.data.physics.fundamental.ScienceUnit;
import com.lacunalabs.dm.data.physics.fundamental.Unit;
import com.lacunalabs.dm.data.physics.instruments.Aperature;
import com.lacunalabs.dm.data.physics.instruments.CcdCamera;
import com.lacunalabs.dm.data.physics.instruments.LensPhysicalProperty;
import com.lacunalabs.dm.data.physics.instruments.Tem;
import com.lacunalabs.dm.data.physics.instruments.TemDoubleTiltHolder;
import com.lacunalabs.dm.data.physics.instruments.TemObjectiveLens;
import com.lacunalabs.dm.data.physics.solidstate.Crystal;
import com.lacunalabs.dm.data.physics.solidstate.CrystalPhysicalProperty;
import com.lacunalabs.dm.data.physics.solidstate.Material;
import com.lacunalabs.dm.data.physics.solidstate.MaterialComponent;
import com.lacunalabs.dm.data.physics.solidstate.MaterialComponentOrientations;
import com.lacunalabs.dm.data.physics.solidstate.MaterialComponentPhysicalProperty;
import com.lacunalabs.dm.data.physics.solidstate.MaterialPhysicalProperty;
import com.lacunalabs.dm.data.repository.math.geometry.OrientationRelationshipService;
import com.lacunalabs.dm.data.repository.math.geometry.OrientationService;
import com.lacunalabs.dm.data.repository.math.geometry.Shape2DService;
import com.lacunalabs.dm.data.repository.math.geometry.Shape3DService;
import com.lacunalabs.dm.data.repository.math.geometry.Vector2DService;
import com.lacunalabs.dm.data.repository.math.geometry.Vector3DService;
import com.lacunalabs.dm.data.repository.physics.crystallography.AtomicPositionService;
import com.lacunalabs.dm.data.repository.physics.crystallography.BravaisLatticeService;
import com.lacunalabs.dm.data.repository.physics.crystallography.CenteringService;
import com.lacunalabs.dm.data.repository.physics.crystallography.LatticeVector3DService;
import com.lacunalabs.dm.data.repository.physics.crystallography.PointGroupService;
import com.lacunalabs.dm.data.repository.physics.crystallography.ReflectionConditionService;
import com.lacunalabs.dm.data.repository.physics.crystallography.SpaceGroupService;
import com.lacunalabs.dm.data.repository.physics.crystallography.UnitCellPhysicalPropertyService;
import com.lacunalabs.dm.data.repository.physics.crystallography.UnitCellService;
import com.lacunalabs.dm.data.repository.physics.crystallography.UnitCellTypeService;
import com.lacunalabs.dm.data.repository.physics.experiment.ProcessorService;
import com.lacunalabs.dm.data.repository.physics.experiment.TemExperimentService;
import com.lacunalabs.dm.data.repository.physics.fundamental.BaseUnitEnumeratorService;
import com.lacunalabs.dm.data.repository.physics.fundamental.BaseUnitService;
import com.lacunalabs.dm.data.repository.physics.fundamental.CompositeParticleService;
import com.lacunalabs.dm.data.repository.physics.fundamental.DecimalMultiplierService;
import com.lacunalabs.dm.data.repository.physics.fundamental.ParticleBeamService;
import com.lacunalabs.dm.data.repository.physics.fundamental.ParticleEnumeratorService;
import com.lacunalabs.dm.data.repository.physics.fundamental.ParticlePhysicalPropertyService;
import com.lacunalabs.dm.data.repository.physics.fundamental.ParticleService;
import com.lacunalabs.dm.data.repository.physics.fundamental.PeriodicTableEntryService;
import com.lacunalabs.dm.data.repository.physics.fundamental.PeriodicTableService;
import com.lacunalabs.dm.data.repository.physics.fundamental.PhysicalConstantService;
import com.lacunalabs.dm.data.repository.physics.fundamental.PhysicalPropertyTypeFieldService;
import com.lacunalabs.dm.data.repository.physics.fundamental.PhysicalPropertyTypeService;
import com.lacunalabs.dm.data.repository.physics.fundamental.ScienceUnitService;
import com.lacunalabs.dm.data.repository.physics.fundamental.UnitService;
import com.lacunalabs.dm.data.repository.physics.instruments.AperatureService;
import com.lacunalabs.dm.data.repository.physics.instruments.CcdCameraService;
import com.lacunalabs.dm.data.repository.physics.instruments.LensPhysicalPropertyService;
import com.lacunalabs.dm.data.repository.physics.instruments.TemDoubleTiltHolderService;
import com.lacunalabs.dm.data.repository.physics.instruments.TemObjectiveLensService;
import com.lacunalabs.dm.data.repository.physics.instruments.TemService;
import com.lacunalabs.dm.data.repository.physics.solidstate.CrystalPhysicalPropertyService;
import com.lacunalabs.dm.data.repository.physics.solidstate.CrystalService;
import com.lacunalabs.dm.data.repository.physics.solidstate.MaterialComponentOrientationsService;
import com.lacunalabs.dm.data.repository.physics.solidstate.MaterialComponentPhysicalPropertyService;
import com.lacunalabs.dm.data.repository.physics.solidstate.MaterialComponentService;
import com.lacunalabs.dm.data.repository.physics.solidstate.MaterialPhysicalPropertyService;
import com.lacunalabs.dm.data.repository.physics.solidstate.MaterialService;
import com.lacunalabs.dm.web.ApplicationConversionServiceFactoryBean;
import java.math.BigInteger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.core.convert.converter.Converter;
import org.springframework.format.FormatterRegistry;

privileged aspect ApplicationConversionServiceFactoryBean_Roo_ConversionService {
    
    declare @type: ApplicationConversionServiceFactoryBean: @Configurable;
    
    @Autowired
    OrientationService ApplicationConversionServiceFactoryBean.orientationService;
    
    @Autowired
    OrientationRelationshipService ApplicationConversionServiceFactoryBean.orientationRelationshipService;
    
    @Autowired
    Shape2DService ApplicationConversionServiceFactoryBean.shape2DService;
    
    @Autowired
    Shape3DService ApplicationConversionServiceFactoryBean.shape3DService;
    
    @Autowired
    Vector2DService ApplicationConversionServiceFactoryBean.vector2DService;
    
    @Autowired
    Vector3DService ApplicationConversionServiceFactoryBean.vector3DService;
    
    @Autowired
    AtomicPositionService ApplicationConversionServiceFactoryBean.atomicPositionService;
    
    @Autowired
    BravaisLatticeService ApplicationConversionServiceFactoryBean.bravaisLatticeService;
    
    @Autowired
    CenteringService ApplicationConversionServiceFactoryBean.centeringService;
    
    @Autowired
    LatticeVector3DService ApplicationConversionServiceFactoryBean.latticeVector3DService;
    
    @Autowired
    PointGroupService ApplicationConversionServiceFactoryBean.pointGroupService;
    
    @Autowired
    ReflectionConditionService ApplicationConversionServiceFactoryBean.reflectionConditionService;
    
    @Autowired
    SpaceGroupService ApplicationConversionServiceFactoryBean.spaceGroupService;
    
    @Autowired
    UnitCellService ApplicationConversionServiceFactoryBean.unitCellService;
    
    @Autowired
    UnitCellPhysicalPropertyService ApplicationConversionServiceFactoryBean.unitCellPhysicalPropertyService;
    
    @Autowired
    UnitCellTypeService ApplicationConversionServiceFactoryBean.unitCellTypeService;
    
    @Autowired
    ProcessorService ApplicationConversionServiceFactoryBean.processorService;
    
    @Autowired
    TemExperimentService ApplicationConversionServiceFactoryBean.temExperimentService;
    
    @Autowired
    BaseUnitService ApplicationConversionServiceFactoryBean.baseUnitService;
    
    @Autowired
    BaseUnitEnumeratorService ApplicationConversionServiceFactoryBean.baseUnitEnumeratorService;
    
    @Autowired
    CompositeParticleService ApplicationConversionServiceFactoryBean.compositeParticleService;
    
    @Autowired
    DecimalMultiplierService ApplicationConversionServiceFactoryBean.decimalMultiplierService;
    
    @Autowired
    ParticleService ApplicationConversionServiceFactoryBean.particleService;
    
    @Autowired
    ParticleBeamService ApplicationConversionServiceFactoryBean.particleBeamService;
    
    @Autowired
    ParticleEnumeratorService ApplicationConversionServiceFactoryBean.particleEnumeratorService;
    
    @Autowired
    ParticlePhysicalPropertyService ApplicationConversionServiceFactoryBean.particlePhysicalPropertyService;
    
    @Autowired
    PeriodicTableService ApplicationConversionServiceFactoryBean.periodicTableService;
    
    @Autowired
    PeriodicTableEntryService ApplicationConversionServiceFactoryBean.periodicTableEntryService;
    
    @Autowired
    PhysicalConstantService ApplicationConversionServiceFactoryBean.physicalConstantService;
    
    @Autowired
    PhysicalPropertyTypeService ApplicationConversionServiceFactoryBean.physicalPropertyTypeService;
    
    @Autowired
    PhysicalPropertyTypeFieldService ApplicationConversionServiceFactoryBean.physicalPropertyTypeFieldService;
    
    @Autowired
    ScienceUnitService ApplicationConversionServiceFactoryBean.scienceUnitService;
    
    @Autowired
    UnitService ApplicationConversionServiceFactoryBean.unitService;
    
    @Autowired
    AperatureService ApplicationConversionServiceFactoryBean.aperatureService;
    
    @Autowired
    CcdCameraService ApplicationConversionServiceFactoryBean.ccdCameraService;
    
    @Autowired
    LensPhysicalPropertyService ApplicationConversionServiceFactoryBean.lensPhysicalPropertyService;
    
    @Autowired
    TemService ApplicationConversionServiceFactoryBean.temService;
    
    @Autowired
    TemDoubleTiltHolderService ApplicationConversionServiceFactoryBean.temDoubleTiltHolderService;
    
    @Autowired
    TemObjectiveLensService ApplicationConversionServiceFactoryBean.temObjectiveLensService;
    
    @Autowired
    CrystalService ApplicationConversionServiceFactoryBean.crystalService;
    
    @Autowired
    CrystalPhysicalPropertyService ApplicationConversionServiceFactoryBean.crystalPhysicalPropertyService;
    
    @Autowired
    MaterialService ApplicationConversionServiceFactoryBean.materialService;
    
    @Autowired
    MaterialComponentService ApplicationConversionServiceFactoryBean.materialComponentService;
    
    @Autowired
    MaterialComponentOrientationsService ApplicationConversionServiceFactoryBean.materialComponentOrientationsService;
    
    @Autowired
    MaterialComponentPhysicalPropertyService ApplicationConversionServiceFactoryBean.materialComponentPhysicalPropertyService;
    
    @Autowired
    MaterialPhysicalPropertyService ApplicationConversionServiceFactoryBean.materialPhysicalPropertyService;
    
    public Converter<Orientation, String> ApplicationConversionServiceFactoryBean.getOrientationToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.math.geometry.Orientation, java.lang.String>() {
            public String convert(Orientation orientation) {
                return new StringBuilder().append(orientation.getRotationAboutZ()).append(' ').append(orientation.getRotationAboutAspectY()).toString();
            }
        };
    }
    
    public Converter<BigInteger, Orientation> ApplicationConversionServiceFactoryBean.getIdToOrientationConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.math.geometry.Orientation>() {
            public com.lacunalabs.dm.data.math.geometry.Orientation convert(java.math.BigInteger id) {
                return orientationService.findOrientation(id);
            }
        };
    }
    
    public Converter<String, Orientation> ApplicationConversionServiceFactoryBean.getStringToOrientationConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.math.geometry.Orientation>() {
            public com.lacunalabs.dm.data.math.geometry.Orientation convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), Orientation.class);
            }
        };
    }
    
    public Converter<OrientationRelationship, String> ApplicationConversionServiceFactoryBean.getOrientationRelationshipToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.math.geometry.OrientationRelationship, java.lang.String>() {
            public String convert(OrientationRelationship orientationRelationship) {
                return new StringBuilder().append(orientationRelationship.getRotationShape2AboutAspect1()).append(' ').append(orientationRelationship.getRotationShape2AboutAspect2()).toString();
            }
        };
    }
    
    public Converter<BigInteger, OrientationRelationship> ApplicationConversionServiceFactoryBean.getIdToOrientationRelationshipConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.math.geometry.OrientationRelationship>() {
            public com.lacunalabs.dm.data.math.geometry.OrientationRelationship convert(java.math.BigInteger id) {
                return orientationRelationshipService.findOrientationRelationship(id);
            }
        };
    }
    
    public Converter<String, OrientationRelationship> ApplicationConversionServiceFactoryBean.getStringToOrientationRelationshipConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.math.geometry.OrientationRelationship>() {
            public com.lacunalabs.dm.data.math.geometry.OrientationRelationship convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), OrientationRelationship.class);
            }
        };
    }
    
    public Converter<Shape2D, String> ApplicationConversionServiceFactoryBean.getShape2DToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.math.geometry.Shape2D, java.lang.String>() {
            public String convert(Shape2D shape2D) {
                return new StringBuilder().append(shape2D.getName()).toString();
            }
        };
    }
    
    public Converter<BigInteger, Shape2D> ApplicationConversionServiceFactoryBean.getIdToShape2DConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.math.geometry.Shape2D>() {
            public com.lacunalabs.dm.data.math.geometry.Shape2D convert(java.math.BigInteger id) {
                return shape2DService.findShape2D(id);
            }
        };
    }
    
    public Converter<String, Shape2D> ApplicationConversionServiceFactoryBean.getStringToShape2DConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.math.geometry.Shape2D>() {
            public com.lacunalabs.dm.data.math.geometry.Shape2D convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), Shape2D.class);
            }
        };
    }
    
    public Converter<Shape3D, String> ApplicationConversionServiceFactoryBean.getShape3DToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.math.geometry.Shape3D, java.lang.String>() {
            public String convert(Shape3D shape3D) {
                return new StringBuilder().append(shape3D.getName()).toString();
            }
        };
    }
    
    public Converter<BigInteger, Shape3D> ApplicationConversionServiceFactoryBean.getIdToShape3DConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.math.geometry.Shape3D>() {
            public com.lacunalabs.dm.data.math.geometry.Shape3D convert(java.math.BigInteger id) {
                return shape3DService.findShape3D(id);
            }
        };
    }
    
    public Converter<String, Shape3D> ApplicationConversionServiceFactoryBean.getStringToShape3DConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.math.geometry.Shape3D>() {
            public com.lacunalabs.dm.data.math.geometry.Shape3D convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), Shape3D.class);
            }
        };
    }
    
    public Converter<Vector2D, String> ApplicationConversionServiceFactoryBean.getVector2DToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.math.geometry.Vector2D, java.lang.String>() {
            public String convert(Vector2D vector2D) {
                return new StringBuilder().append(vector2D.getX()).append(' ').append(vector2D.getY()).toString();
            }
        };
    }
    
    public Converter<BigInteger, Vector2D> ApplicationConversionServiceFactoryBean.getIdToVector2DConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.math.geometry.Vector2D>() {
            public com.lacunalabs.dm.data.math.geometry.Vector2D convert(java.math.BigInteger id) {
                return vector2DService.findVector2D(id);
            }
        };
    }
    
    public Converter<String, Vector2D> ApplicationConversionServiceFactoryBean.getStringToVector2DConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.math.geometry.Vector2D>() {
            public com.lacunalabs.dm.data.math.geometry.Vector2D convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), Vector2D.class);
            }
        };
    }
    
    public Converter<Vector3D, String> ApplicationConversionServiceFactoryBean.getVector3DToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.math.geometry.Vector3D, java.lang.String>() {
            public String convert(Vector3D vector3D) {
                return new StringBuilder().append(vector3D.getX()).append(' ').append(vector3D.getY()).append(' ').append(vector3D.getZ()).toString();
            }
        };
    }
    
    public Converter<BigInteger, Vector3D> ApplicationConversionServiceFactoryBean.getIdToVector3DConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.math.geometry.Vector3D>() {
            public com.lacunalabs.dm.data.math.geometry.Vector3D convert(java.math.BigInteger id) {
                return vector3DService.findVector3D(id);
            }
        };
    }
    
    public Converter<String, Vector3D> ApplicationConversionServiceFactoryBean.getStringToVector3DConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.math.geometry.Vector3D>() {
            public com.lacunalabs.dm.data.math.geometry.Vector3D convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), Vector3D.class);
            }
        };
    }
    
    public Converter<AtomicPosition, String> ApplicationConversionServiceFactoryBean.getAtomicPositionToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.crystallography.AtomicPosition, java.lang.String>() {
            public String convert(AtomicPosition atomicPosition) {
                return new StringBuilder().append(atomicPosition.getX()).append(' ').append(atomicPosition.getY()).append(' ').append(atomicPosition.getZ()).append(' ').append(atomicPosition.getOccupancy()).toString();
            }
        };
    }
    
    public Converter<BigInteger, AtomicPosition> ApplicationConversionServiceFactoryBean.getIdToAtomicPositionConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.crystallography.AtomicPosition>() {
            public com.lacunalabs.dm.data.physics.crystallography.AtomicPosition convert(java.math.BigInteger id) {
                return atomicPositionService.findAtomicPosition(id);
            }
        };
    }
    
    public Converter<String, AtomicPosition> ApplicationConversionServiceFactoryBean.getStringToAtomicPositionConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.crystallography.AtomicPosition>() {
            public com.lacunalabs.dm.data.physics.crystallography.AtomicPosition convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), AtomicPosition.class);
            }
        };
    }
    
    public Converter<BravaisLattice, String> ApplicationConversionServiceFactoryBean.getBravaisLatticeToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.crystallography.BravaisLattice, java.lang.String>() {
            public String convert(BravaisLattice bravaisLattice) {
                return new StringBuilder().append(bravaisLattice.getA()).append(' ').append(bravaisLattice.getB()).append(' ').append(bravaisLattice.getC()).append(' ').append(bravaisLattice.getAlpha()).toString();
            }
        };
    }
    
    public Converter<BigInteger, BravaisLattice> ApplicationConversionServiceFactoryBean.getIdToBravaisLatticeConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.crystallography.BravaisLattice>() {
            public com.lacunalabs.dm.data.physics.crystallography.BravaisLattice convert(java.math.BigInteger id) {
                return bravaisLatticeService.findBravaisLattice(id);
            }
        };
    }
    
    public Converter<String, BravaisLattice> ApplicationConversionServiceFactoryBean.getStringToBravaisLatticeConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.crystallography.BravaisLattice>() {
            public com.lacunalabs.dm.data.physics.crystallography.BravaisLattice convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), BravaisLattice.class);
            }
        };
    }
    
    public Converter<Centering, String> ApplicationConversionServiceFactoryBean.getCenteringToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.crystallography.Centering, java.lang.String>() {
            public String convert(Centering centering) {
                return new StringBuilder().append(centering.getName()).append(' ').append(centering.getCenterings()).append(' ').append(centering.getReflectionConditions()).toString();
            }
        };
    }
    
    public Converter<BigInteger, Centering> ApplicationConversionServiceFactoryBean.getIdToCenteringConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.crystallography.Centering>() {
            public com.lacunalabs.dm.data.physics.crystallography.Centering convert(java.math.BigInteger id) {
                return centeringService.findCentering(id);
            }
        };
    }
    
    public Converter<String, Centering> ApplicationConversionServiceFactoryBean.getStringToCenteringConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.crystallography.Centering>() {
            public com.lacunalabs.dm.data.physics.crystallography.Centering convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), Centering.class);
            }
        };
    }
    
    public Converter<LatticeVector3D, String> ApplicationConversionServiceFactoryBean.getLatticeVector3DToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.crystallography.LatticeVector3D, java.lang.String>() {
            public String convert(LatticeVector3D latticeVector3D) {
                return new StringBuilder().append(latticeVector3D.getX()).append(' ').append(latticeVector3D.getY()).append(' ').append(latticeVector3D.getZ()).toString();
            }
        };
    }
    
    public Converter<BigInteger, LatticeVector3D> ApplicationConversionServiceFactoryBean.getIdToLatticeVector3DConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.crystallography.LatticeVector3D>() {
            public com.lacunalabs.dm.data.physics.crystallography.LatticeVector3D convert(java.math.BigInteger id) {
                return latticeVector3DService.findLatticeVector3D(id);
            }
        };
    }
    
    public Converter<String, LatticeVector3D> ApplicationConversionServiceFactoryBean.getStringToLatticeVector3DConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.crystallography.LatticeVector3D>() {
            public com.lacunalabs.dm.data.physics.crystallography.LatticeVector3D convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), LatticeVector3D.class);
            }
        };
    }
    
    public Converter<PointGroup, String> ApplicationConversionServiceFactoryBean.getPointGroupToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.crystallography.PointGroup, java.lang.String>() {
            public String convert(PointGroup pointGroup) {
                return new StringBuilder().append(pointGroup.getName()).append(' ').append(pointGroup.getSymbol()).append(' ').append(pointGroup.getReflectionConditions()).append(' ').append(pointGroup.getCenterings()).toString();
            }
        };
    }
    
    public Converter<BigInteger, PointGroup> ApplicationConversionServiceFactoryBean.getIdToPointGroupConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.crystallography.PointGroup>() {
            public com.lacunalabs.dm.data.physics.crystallography.PointGroup convert(java.math.BigInteger id) {
                return pointGroupService.findPointGroup(id);
            }
        };
    }
    
    public Converter<String, PointGroup> ApplicationConversionServiceFactoryBean.getStringToPointGroupConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.crystallography.PointGroup>() {
            public com.lacunalabs.dm.data.physics.crystallography.PointGroup convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), PointGroup.class);
            }
        };
    }
    
    public Converter<ReflectionCondition, String> ApplicationConversionServiceFactoryBean.getReflectionConditionToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.crystallography.ReflectionCondition, java.lang.String>() {
            public String convert(ReflectionCondition reflectionCondition) {
                return "(no displayable fields)";
            }
        };
    }
    
    public Converter<BigInteger, ReflectionCondition> ApplicationConversionServiceFactoryBean.getIdToReflectionConditionConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.crystallography.ReflectionCondition>() {
            public com.lacunalabs.dm.data.physics.crystallography.ReflectionCondition convert(java.math.BigInteger id) {
                return reflectionConditionService.findReflectionCondition(id);
            }
        };
    }
    
    public Converter<String, ReflectionCondition> ApplicationConversionServiceFactoryBean.getStringToReflectionConditionConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.crystallography.ReflectionCondition>() {
            public com.lacunalabs.dm.data.physics.crystallography.ReflectionCondition convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), ReflectionCondition.class);
            }
        };
    }
    
    public Converter<SpaceGroup, String> ApplicationConversionServiceFactoryBean.getSpaceGroupToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.crystallography.SpaceGroup, java.lang.String>() {
            public String convert(SpaceGroup spaceGroup) {
                return new StringBuilder().append(spaceGroup.getName()).append(' ').append(spaceGroup.getSymbol()).append(' ').append(spaceGroup.getSpaceGroupNumber()).append(' ').append(spaceGroup.getCoordinatePoints()).toString();
            }
        };
    }
    
    public Converter<BigInteger, SpaceGroup> ApplicationConversionServiceFactoryBean.getIdToSpaceGroupConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.crystallography.SpaceGroup>() {
            public com.lacunalabs.dm.data.physics.crystallography.SpaceGroup convert(java.math.BigInteger id) {
                return spaceGroupService.findSpaceGroup(id);
            }
        };
    }
    
    public Converter<String, SpaceGroup> ApplicationConversionServiceFactoryBean.getStringToSpaceGroupConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.crystallography.SpaceGroup>() {
            public com.lacunalabs.dm.data.physics.crystallography.SpaceGroup convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), SpaceGroup.class);
            }
        };
    }
    
    public Converter<UnitCell, String> ApplicationConversionServiceFactoryBean.getUnitCellToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.crystallography.UnitCell, java.lang.String>() {
            public String convert(UnitCell unitCell) {
                return new StringBuilder().append(unitCell.getName()).append(' ').append(unitCell.getSymbol()).append(' ').append(unitCell.getMetadata()).toString();
            }
        };
    }
    
    public Converter<BigInteger, UnitCell> ApplicationConversionServiceFactoryBean.getIdToUnitCellConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.crystallography.UnitCell>() {
            public com.lacunalabs.dm.data.physics.crystallography.UnitCell convert(java.math.BigInteger id) {
                return unitCellService.findUnitCell(id);
            }
        };
    }
    
    public Converter<String, UnitCell> ApplicationConversionServiceFactoryBean.getStringToUnitCellConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.crystallography.UnitCell>() {
            public com.lacunalabs.dm.data.physics.crystallography.UnitCell convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), UnitCell.class);
            }
        };
    }
    
    public Converter<UnitCellPhysicalProperty, String> ApplicationConversionServiceFactoryBean.getUnitCellPhysicalPropertyToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.crystallography.UnitCellPhysicalProperty, java.lang.String>() {
            public String convert(UnitCellPhysicalProperty unitCellPhysicalProperty) {
                return new StringBuilder().append(unitCellPhysicalProperty.getQuantity()).append(' ').append(unitCellPhysicalProperty.getFunctionParameters()).append(' ').append(unitCellPhysicalProperty.getUncertainty()).toString();
            }
        };
    }
    
    public Converter<BigInteger, UnitCellPhysicalProperty> ApplicationConversionServiceFactoryBean.getIdToUnitCellPhysicalPropertyConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.crystallography.UnitCellPhysicalProperty>() {
            public com.lacunalabs.dm.data.physics.crystallography.UnitCellPhysicalProperty convert(java.math.BigInteger id) {
                return unitCellPhysicalPropertyService.findUnitCellPhysicalProperty(id);
            }
        };
    }
    
    public Converter<String, UnitCellPhysicalProperty> ApplicationConversionServiceFactoryBean.getStringToUnitCellPhysicalPropertyConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.crystallography.UnitCellPhysicalProperty>() {
            public com.lacunalabs.dm.data.physics.crystallography.UnitCellPhysicalProperty convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), UnitCellPhysicalProperty.class);
            }
        };
    }
    
    public Converter<UnitCellType, String> ApplicationConversionServiceFactoryBean.getUnitCellTypeToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.crystallography.UnitCellType, java.lang.String>() {
            public String convert(UnitCellType unitCellType) {
                return new StringBuilder().append(unitCellType.getDesignation()).toString();
            }
        };
    }
    
    public Converter<BigInteger, UnitCellType> ApplicationConversionServiceFactoryBean.getIdToUnitCellTypeConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.crystallography.UnitCellType>() {
            public com.lacunalabs.dm.data.physics.crystallography.UnitCellType convert(java.math.BigInteger id) {
                return unitCellTypeService.findUnitCellType(id);
            }
        };
    }
    
    public Converter<String, UnitCellType> ApplicationConversionServiceFactoryBean.getStringToUnitCellTypeConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.crystallography.UnitCellType>() {
            public com.lacunalabs.dm.data.physics.crystallography.UnitCellType convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), UnitCellType.class);
            }
        };
    }
    
    public Converter<Processor, String> ApplicationConversionServiceFactoryBean.getProcessorToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.experiment.Processor, java.lang.String>() {
            public String convert(Processor processor) {
                return new StringBuilder().append(processor.getName()).append(' ').append(processor.getProcessClass()).append(' ').append(processor.getResultsClass()).append(' ').append(processor.getProcessInputTranslatorClass()).toString();
            }
        };
    }
    
    public Converter<BigInteger, Processor> ApplicationConversionServiceFactoryBean.getIdToProcessorConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.experiment.Processor>() {
            public com.lacunalabs.dm.data.physics.experiment.Processor convert(java.math.BigInteger id) {
                return processorService.findProcessor(id);
            }
        };
    }
    
    public Converter<String, Processor> ApplicationConversionServiceFactoryBean.getStringToProcessorConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.experiment.Processor>() {
            public com.lacunalabs.dm.data.physics.experiment.Processor convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), Processor.class);
            }
        };
    }
    
    public Converter<TemExperiment, String> ApplicationConversionServiceFactoryBean.getTemExperimentToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.experiment.TemExperiment, java.lang.String>() {
            public String convert(TemExperiment temExperiment) {
                return new StringBuilder().append(temExperiment.getIdentifier()).append(' ').append(temExperiment.getMetadata()).append(' ').append(temExperiment.getCameraLength()).append(' ').append(temExperiment.getCameraConstant()).toString();
            }
        };
    }
    
    public Converter<BigInteger, TemExperiment> ApplicationConversionServiceFactoryBean.getIdToTemExperimentConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.experiment.TemExperiment>() {
            public com.lacunalabs.dm.data.physics.experiment.TemExperiment convert(java.math.BigInteger id) {
                return temExperimentService.findTemExperiment(id);
            }
        };
    }
    
    public Converter<String, TemExperiment> ApplicationConversionServiceFactoryBean.getStringToTemExperimentConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.experiment.TemExperiment>() {
            public com.lacunalabs.dm.data.physics.experiment.TemExperiment convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), TemExperiment.class);
            }
        };
    }
    
    public Converter<BaseUnit, String> ApplicationConversionServiceFactoryBean.getBaseUnitToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.fundamental.BaseUnit, java.lang.String>() {
            public String convert(BaseUnit baseUnit) {
                return new StringBuilder().append(baseUnit.getName()).append(' ').append(baseUnit.getSymbol()).toString();
            }
        };
    }
    
    public Converter<BigInteger, BaseUnit> ApplicationConversionServiceFactoryBean.getIdToBaseUnitConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.fundamental.BaseUnit>() {
            public com.lacunalabs.dm.data.physics.fundamental.BaseUnit convert(java.math.BigInteger id) {
                return baseUnitService.findBaseUnit(id);
            }
        };
    }
    
    public Converter<String, BaseUnit> ApplicationConversionServiceFactoryBean.getStringToBaseUnitConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.fundamental.BaseUnit>() {
            public com.lacunalabs.dm.data.physics.fundamental.BaseUnit convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), BaseUnit.class);
            }
        };
    }
    
    public Converter<BaseUnitEnumerator, String> ApplicationConversionServiceFactoryBean.getBaseUnitEnumeratorToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.fundamental.BaseUnitEnumerator, java.lang.String>() {
            public String convert(BaseUnitEnumerator baseUnitEnumerator) {
                return new StringBuilder().append(baseUnitEnumerator.getIdentifier()).append(' ').append(baseUnitEnumerator.getExponent()).append(' ').append(baseUnitEnumerator.getMultiplier()).append(' ').append(baseUnitEnumerator.getZeroOffset()).toString();
            }
        };
    }
    
    public Converter<BigInteger, BaseUnitEnumerator> ApplicationConversionServiceFactoryBean.getIdToBaseUnitEnumeratorConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.fundamental.BaseUnitEnumerator>() {
            public com.lacunalabs.dm.data.physics.fundamental.BaseUnitEnumerator convert(java.math.BigInteger id) {
                return baseUnitEnumeratorService.findBaseUnitEnumerator(id);
            }
        };
    }
    
    public Converter<String, BaseUnitEnumerator> ApplicationConversionServiceFactoryBean.getStringToBaseUnitEnumeratorConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.fundamental.BaseUnitEnumerator>() {
            public com.lacunalabs.dm.data.physics.fundamental.BaseUnitEnumerator convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), BaseUnitEnumerator.class);
            }
        };
    }
    
    public Converter<CompositeParticle, String> ApplicationConversionServiceFactoryBean.getCompositeParticleToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.fundamental.CompositeParticle, java.lang.String>() {
            public String convert(CompositeParticle compositeParticle) {
                return new StringBuilder().append(compositeParticle.getName()).append(' ').append(compositeParticle.getSymbol()).append(' ').append(compositeParticle.getMass()).append(' ').append(compositeParticle.getMetadata()).toString();
            }
        };
    }
    
    public Converter<BigInteger, CompositeParticle> ApplicationConversionServiceFactoryBean.getIdToCompositeParticleConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.fundamental.CompositeParticle>() {
            public com.lacunalabs.dm.data.physics.fundamental.CompositeParticle convert(java.math.BigInteger id) {
                return compositeParticleService.findCompositeParticle(id);
            }
        };
    }
    
    public Converter<String, CompositeParticle> ApplicationConversionServiceFactoryBean.getStringToCompositeParticleConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.fundamental.CompositeParticle>() {
            public com.lacunalabs.dm.data.physics.fundamental.CompositeParticle convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), CompositeParticle.class);
            }
        };
    }
    
    public Converter<DecimalMultiplier, String> ApplicationConversionServiceFactoryBean.getDecimalMultiplierToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.fundamental.DecimalMultiplier, java.lang.String>() {
            public String convert(DecimalMultiplier decimalMultiplier) {
                return new StringBuilder().append(decimalMultiplier.getName()).append(' ').append(decimalMultiplier.getSymbol()).append(' ').append(decimalMultiplier.getMultiplier()).toString();
            }
        };
    }
    
    public Converter<BigInteger, DecimalMultiplier> ApplicationConversionServiceFactoryBean.getIdToDecimalMultiplierConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.fundamental.DecimalMultiplier>() {
            public com.lacunalabs.dm.data.physics.fundamental.DecimalMultiplier convert(java.math.BigInteger id) {
                return decimalMultiplierService.findDecimalMultiplier(id);
            }
        };
    }
    
    public Converter<String, DecimalMultiplier> ApplicationConversionServiceFactoryBean.getStringToDecimalMultiplierConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.fundamental.DecimalMultiplier>() {
            public com.lacunalabs.dm.data.physics.fundamental.DecimalMultiplier convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), DecimalMultiplier.class);
            }
        };
    }
    
    public Converter<Particle, String> ApplicationConversionServiceFactoryBean.getParticleToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.fundamental.Particle, java.lang.String>() {
            public String convert(Particle particle) {
                return new StringBuilder().append(particle.getName()).append(' ').append(particle.getSymbol()).append(' ').append(particle.getCharge()).append(' ').append(particle.getMass()).toString();
            }
        };
    }
    
    public Converter<BigInteger, Particle> ApplicationConversionServiceFactoryBean.getIdToParticleConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.fundamental.Particle>() {
            public com.lacunalabs.dm.data.physics.fundamental.Particle convert(java.math.BigInteger id) {
                return particleService.findParticle(id);
            }
        };
    }
    
    public Converter<String, Particle> ApplicationConversionServiceFactoryBean.getStringToParticleConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.fundamental.Particle>() {
            public com.lacunalabs.dm.data.physics.fundamental.Particle convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), Particle.class);
            }
        };
    }
    
    public Converter<ParticleBeam, String> ApplicationConversionServiceFactoryBean.getParticleBeamToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.fundamental.ParticleBeam, java.lang.String>() {
            public String convert(ParticleBeam particleBeam) {
                return new StringBuilder().append(particleBeam.getVoltage()).append(' ').append(particleBeam.getWavelength()).append(' ').append(particleBeam.getIntensity()).toString();
            }
        };
    }
    
    public Converter<BigInteger, ParticleBeam> ApplicationConversionServiceFactoryBean.getIdToParticleBeamConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.fundamental.ParticleBeam>() {
            public com.lacunalabs.dm.data.physics.fundamental.ParticleBeam convert(java.math.BigInteger id) {
                return particleBeamService.findParticleBeam(id);
            }
        };
    }
    
    public Converter<String, ParticleBeam> ApplicationConversionServiceFactoryBean.getStringToParticleBeamConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.fundamental.ParticleBeam>() {
            public com.lacunalabs.dm.data.physics.fundamental.ParticleBeam convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), ParticleBeam.class);
            }
        };
    }
    
    public Converter<ParticleEnumerator, String> ApplicationConversionServiceFactoryBean.getParticleEnumeratorToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.fundamental.ParticleEnumerator, java.lang.String>() {
            public String convert(ParticleEnumerator particleEnumerator) {
                return new StringBuilder().append(particleEnumerator.getAmount()).append(' ').append(particleEnumerator.getName()).toString();
            }
        };
    }
    
    public Converter<BigInteger, ParticleEnumerator> ApplicationConversionServiceFactoryBean.getIdToParticleEnumeratorConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.fundamental.ParticleEnumerator>() {
            public com.lacunalabs.dm.data.physics.fundamental.ParticleEnumerator convert(java.math.BigInteger id) {
                return particleEnumeratorService.findParticleEnumerator(id);
            }
        };
    }
    
    public Converter<String, ParticleEnumerator> ApplicationConversionServiceFactoryBean.getStringToParticleEnumeratorConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.fundamental.ParticleEnumerator>() {
            public com.lacunalabs.dm.data.physics.fundamental.ParticleEnumerator convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), ParticleEnumerator.class);
            }
        };
    }
    
    public Converter<ParticlePhysicalProperty, String> ApplicationConversionServiceFactoryBean.getParticlePhysicalPropertyToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.fundamental.ParticlePhysicalProperty, java.lang.String>() {
            public String convert(ParticlePhysicalProperty particlePhysicalProperty) {
                return new StringBuilder().append(particlePhysicalProperty.getName()).append(' ').append(particlePhysicalProperty.getQuantity()).append(' ').append(particlePhysicalProperty.getFunctionParameters()).append(' ').append(particlePhysicalProperty.getUncertainty()).toString();
            }
        };
    }
    
    public Converter<BigInteger, ParticlePhysicalProperty> ApplicationConversionServiceFactoryBean.getIdToParticlePhysicalPropertyConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.fundamental.ParticlePhysicalProperty>() {
            public com.lacunalabs.dm.data.physics.fundamental.ParticlePhysicalProperty convert(java.math.BigInteger id) {
                return particlePhysicalPropertyService.findParticlePhysicalProperty(id);
            }
        };
    }
    
    public Converter<String, ParticlePhysicalProperty> ApplicationConversionServiceFactoryBean.getStringToParticlePhysicalPropertyConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.fundamental.ParticlePhysicalProperty>() {
            public com.lacunalabs.dm.data.physics.fundamental.ParticlePhysicalProperty convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), ParticlePhysicalProperty.class);
            }
        };
    }
    
    public Converter<PeriodicTable, String> ApplicationConversionServiceFactoryBean.getPeriodicTableToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.fundamental.PeriodicTable, java.lang.String>() {
            public String convert(PeriodicTable periodicTable) {
                return new StringBuilder().append(periodicTable.getName()).toString();
            }
        };
    }
    
    public Converter<BigInteger, PeriodicTable> ApplicationConversionServiceFactoryBean.getIdToPeriodicTableConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.fundamental.PeriodicTable>() {
            public com.lacunalabs.dm.data.physics.fundamental.PeriodicTable convert(java.math.BigInteger id) {
                return periodicTableService.findPeriodicTable(id);
            }
        };
    }
    
    public Converter<String, PeriodicTable> ApplicationConversionServiceFactoryBean.getStringToPeriodicTableConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.fundamental.PeriodicTable>() {
            public com.lacunalabs.dm.data.physics.fundamental.PeriodicTable convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), PeriodicTable.class);
            }
        };
    }
    
    public Converter<PeriodicTableEntry, String> ApplicationConversionServiceFactoryBean.getPeriodicTableEntryToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.fundamental.PeriodicTableEntry, java.lang.String>() {
            public String convert(PeriodicTableEntry periodicTableEntry) {
                return new StringBuilder().append(periodicTableEntry.getPeriod()).append(' ').append(periodicTableEntry.getTableGroup()).append(' ').append(periodicTableEntry.getSymbol()).toString();
            }
        };
    }
    
    public Converter<BigInteger, PeriodicTableEntry> ApplicationConversionServiceFactoryBean.getIdToPeriodicTableEntryConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.fundamental.PeriodicTableEntry>() {
            public com.lacunalabs.dm.data.physics.fundamental.PeriodicTableEntry convert(java.math.BigInteger id) {
                return periodicTableEntryService.findPeriodicTableEntry(id);
            }
        };
    }
    
    public Converter<String, PeriodicTableEntry> ApplicationConversionServiceFactoryBean.getStringToPeriodicTableEntryConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.fundamental.PeriodicTableEntry>() {
            public com.lacunalabs.dm.data.physics.fundamental.PeriodicTableEntry convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), PeriodicTableEntry.class);
            }
        };
    }
    
    public Converter<PhysicalConstant, String> ApplicationConversionServiceFactoryBean.getPhysicalConstantToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.fundamental.PhysicalConstant, java.lang.String>() {
            public String convert(PhysicalConstant physicalConstant) {
                return new StringBuilder().append(physicalConstant.getName()).append(' ').append(physicalConstant.getSymbol()).append(' ').append(physicalConstant.getMetadata()).append(' ').append(physicalConstant.getQuantity()).toString();
            }
        };
    }
    
    public Converter<BigInteger, PhysicalConstant> ApplicationConversionServiceFactoryBean.getIdToPhysicalConstantConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.fundamental.PhysicalConstant>() {
            public com.lacunalabs.dm.data.physics.fundamental.PhysicalConstant convert(java.math.BigInteger id) {
                return physicalConstantService.findPhysicalConstant(id);
            }
        };
    }
    
    public Converter<String, PhysicalConstant> ApplicationConversionServiceFactoryBean.getStringToPhysicalConstantConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.fundamental.PhysicalConstant>() {
            public com.lacunalabs.dm.data.physics.fundamental.PhysicalConstant convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), PhysicalConstant.class);
            }
        };
    }
    
    public Converter<PhysicalPropertyType, String> ApplicationConversionServiceFactoryBean.getPhysicalPropertyTypeToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.fundamental.PhysicalPropertyType, java.lang.String>() {
            public String convert(PhysicalPropertyType physicalPropertyType) {
                return new StringBuilder().append(physicalPropertyType.getName()).append(' ').append(physicalPropertyType.getSymbol()).append(' ').append(physicalPropertyType.getMetadata()).toString();
            }
        };
    }
    
    public Converter<BigInteger, PhysicalPropertyType> ApplicationConversionServiceFactoryBean.getIdToPhysicalPropertyTypeConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.fundamental.PhysicalPropertyType>() {
            public com.lacunalabs.dm.data.physics.fundamental.PhysicalPropertyType convert(java.math.BigInteger id) {
                return physicalPropertyTypeService.findPhysicalPropertyType(id);
            }
        };
    }
    
    public Converter<String, PhysicalPropertyType> ApplicationConversionServiceFactoryBean.getStringToPhysicalPropertyTypeConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.fundamental.PhysicalPropertyType>() {
            public com.lacunalabs.dm.data.physics.fundamental.PhysicalPropertyType convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), PhysicalPropertyType.class);
            }
        };
    }
    
    public Converter<PhysicalPropertyTypeField, String> ApplicationConversionServiceFactoryBean.getPhysicalPropertyTypeFieldToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.fundamental.PhysicalPropertyTypeField, java.lang.String>() {
            public String convert(PhysicalPropertyTypeField physicalPropertyTypeField) {
                return new StringBuilder().append(physicalPropertyTypeField.getFullFieldName()).toString();
            }
        };
    }
    
    public Converter<BigInteger, PhysicalPropertyTypeField> ApplicationConversionServiceFactoryBean.getIdToPhysicalPropertyTypeFieldConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.fundamental.PhysicalPropertyTypeField>() {
            public com.lacunalabs.dm.data.physics.fundamental.PhysicalPropertyTypeField convert(java.math.BigInteger id) {
                return physicalPropertyTypeFieldService.findPhysicalPropertyTypeField(id);
            }
        };
    }
    
    public Converter<String, PhysicalPropertyTypeField> ApplicationConversionServiceFactoryBean.getStringToPhysicalPropertyTypeFieldConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.fundamental.PhysicalPropertyTypeField>() {
            public com.lacunalabs.dm.data.physics.fundamental.PhysicalPropertyTypeField convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), PhysicalPropertyTypeField.class);
            }
        };
    }
    
    public Converter<ScienceUnit, String> ApplicationConversionServiceFactoryBean.getScienceUnitToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.fundamental.ScienceUnit, java.lang.String>() {
            public String convert(ScienceUnit scienceUnit) {
                return new StringBuilder().append(scienceUnit.getName()).append(' ').append(scienceUnit.getSymbol()).append(' ').append(scienceUnit.getMetadata()).toString();
            }
        };
    }
    
    public Converter<BigInteger, ScienceUnit> ApplicationConversionServiceFactoryBean.getIdToScienceUnitConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.fundamental.ScienceUnit>() {
            public com.lacunalabs.dm.data.physics.fundamental.ScienceUnit convert(java.math.BigInteger id) {
                return scienceUnitService.findScienceUnit(id);
            }
        };
    }
    
    public Converter<String, ScienceUnit> ApplicationConversionServiceFactoryBean.getStringToScienceUnitConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.fundamental.ScienceUnit>() {
            public com.lacunalabs.dm.data.physics.fundamental.ScienceUnit convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), ScienceUnit.class);
            }
        };
    }
    
    public Converter<Unit, String> ApplicationConversionServiceFactoryBean.getUnitToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.fundamental.Unit, java.lang.String>() {
            public String convert(Unit unit) {
                return new StringBuilder().append(unit.getName()).append(' ').append(unit.getSymbol()).append(' ').append(unit.getConversionToMultiplier()).append(' ').append(unit.getConversionToOffset()).toString();
            }
        };
    }
    
    public Converter<BigInteger, Unit> ApplicationConversionServiceFactoryBean.getIdToUnitConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.fundamental.Unit>() {
            public com.lacunalabs.dm.data.physics.fundamental.Unit convert(java.math.BigInteger id) {
                return unitService.findUnit(id);
            }
        };
    }
    
    public Converter<String, Unit> ApplicationConversionServiceFactoryBean.getStringToUnitConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.fundamental.Unit>() {
            public com.lacunalabs.dm.data.physics.fundamental.Unit convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), Unit.class);
            }
        };
    }
    
    public Converter<Aperature, String> ApplicationConversionServiceFactoryBean.getAperatureToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.instruments.Aperature, java.lang.String>() {
            public String convert(Aperature aperature) {
                return new StringBuilder().append(aperature.getName()).append(' ').append(aperature.getAperatureRadius()).append(' ').append(aperature.getMetadata()).toString();
            }
        };
    }
    
    public Converter<BigInteger, Aperature> ApplicationConversionServiceFactoryBean.getIdToAperatureConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.instruments.Aperature>() {
            public com.lacunalabs.dm.data.physics.instruments.Aperature convert(java.math.BigInteger id) {
                return aperatureService.findAperature(id);
            }
        };
    }
    
    public Converter<String, Aperature> ApplicationConversionServiceFactoryBean.getStringToAperatureConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.instruments.Aperature>() {
            public com.lacunalabs.dm.data.physics.instruments.Aperature convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), Aperature.class);
            }
        };
    }
    
    public Converter<CcdCamera, String> ApplicationConversionServiceFactoryBean.getCcdCameraToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.instruments.CcdCamera, java.lang.String>() {
            public String convert(CcdCamera ccdCamera) {
                return new StringBuilder().append(ccdCamera.getName()).append(' ').append(ccdCamera.getManufacturer()).append(' ').append(ccdCamera.getXResolution()).append(' ').append(ccdCamera.getYResolution()).toString();
            }
        };
    }
    
    public Converter<BigInteger, CcdCamera> ApplicationConversionServiceFactoryBean.getIdToCcdCameraConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.instruments.CcdCamera>() {
            public com.lacunalabs.dm.data.physics.instruments.CcdCamera convert(java.math.BigInteger id) {
                return ccdCameraService.findCcdCamera(id);
            }
        };
    }
    
    public Converter<String, CcdCamera> ApplicationConversionServiceFactoryBean.getStringToCcdCameraConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.instruments.CcdCamera>() {
            public com.lacunalabs.dm.data.physics.instruments.CcdCamera convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), CcdCamera.class);
            }
        };
    }
    
    public Converter<LensPhysicalProperty, String> ApplicationConversionServiceFactoryBean.getLensPhysicalPropertyToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.instruments.LensPhysicalProperty, java.lang.String>() {
            public String convert(LensPhysicalProperty lensPhysicalProperty) {
                return new StringBuilder().append(lensPhysicalProperty.getName()).append(' ').append(lensPhysicalProperty.getQuantity()).append(' ').append(lensPhysicalProperty.getFunctionParameters()).append(' ').append(lensPhysicalProperty.getUncertainty()).toString();
            }
        };
    }
    
    public Converter<BigInteger, LensPhysicalProperty> ApplicationConversionServiceFactoryBean.getIdToLensPhysicalPropertyConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.instruments.LensPhysicalProperty>() {
            public com.lacunalabs.dm.data.physics.instruments.LensPhysicalProperty convert(java.math.BigInteger id) {
                return lensPhysicalPropertyService.findLensPhysicalProperty(id);
            }
        };
    }
    
    public Converter<String, LensPhysicalProperty> ApplicationConversionServiceFactoryBean.getStringToLensPhysicalPropertyConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.instruments.LensPhysicalProperty>() {
            public com.lacunalabs.dm.data.physics.instruments.LensPhysicalProperty convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), LensPhysicalProperty.class);
            }
        };
    }
    
    public Converter<Tem, String> ApplicationConversionServiceFactoryBean.getTemToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.instruments.Tem, java.lang.String>() {
            public String convert(Tem tem) {
                return new StringBuilder().append(tem.getManufacturer()).append(' ').append(tem.getMicroscope()).append(' ').append(tem.getMetadata()).toString();
            }
        };
    }
    
    public Converter<BigInteger, Tem> ApplicationConversionServiceFactoryBean.getIdToTemConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.instruments.Tem>() {
            public com.lacunalabs.dm.data.physics.instruments.Tem convert(java.math.BigInteger id) {
                return temService.findTem(id);
            }
        };
    }
    
    public Converter<String, Tem> ApplicationConversionServiceFactoryBean.getStringToTemConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.instruments.Tem>() {
            public com.lacunalabs.dm.data.physics.instruments.Tem convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), Tem.class);
            }
        };
    }
    
    public Converter<TemDoubleTiltHolder, String> ApplicationConversionServiceFactoryBean.getTemDoubleTiltHolderToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.instruments.TemDoubleTiltHolder, java.lang.String>() {
            public String convert(TemDoubleTiltHolder temDoubleTiltHolder) {
                return new StringBuilder().append(temDoubleTiltHolder.getName()).append(' ').append(temDoubleTiltHolder.getTiltAxisRotationToVertical()).append(' ').append(temDoubleTiltHolder.getAzimuthAxisRotationToVertical()).toString();
            }
        };
    }
    
    public Converter<BigInteger, TemDoubleTiltHolder> ApplicationConversionServiceFactoryBean.getIdToTemDoubleTiltHolderConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.instruments.TemDoubleTiltHolder>() {
            public com.lacunalabs.dm.data.physics.instruments.TemDoubleTiltHolder convert(java.math.BigInteger id) {
                return temDoubleTiltHolderService.findTemDoubleTiltHolder(id);
            }
        };
    }
    
    public Converter<String, TemDoubleTiltHolder> ApplicationConversionServiceFactoryBean.getStringToTemDoubleTiltHolderConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.instruments.TemDoubleTiltHolder>() {
            public com.lacunalabs.dm.data.physics.instruments.TemDoubleTiltHolder convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), TemDoubleTiltHolder.class);
            }
        };
    }
    
    public Converter<TemObjectiveLens, String> ApplicationConversionServiceFactoryBean.getTemObjectiveLensToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.instruments.TemObjectiveLens, java.lang.String>() {
            public String convert(TemObjectiveLens temObjectiveLens) {
                return new StringBuilder().append(temObjectiveLens.getName()).append(' ').append(temObjectiveLens.getChromaticAberration()).append(' ').append(temObjectiveLens.getSphericalAberration()).append(' ').append(temObjectiveLens.getDelVoltage()).toString();
            }
        };
    }
    
    public Converter<BigInteger, TemObjectiveLens> ApplicationConversionServiceFactoryBean.getIdToTemObjectiveLensConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.instruments.TemObjectiveLens>() {
            public com.lacunalabs.dm.data.physics.instruments.TemObjectiveLens convert(java.math.BigInteger id) {
                return temObjectiveLensService.findTemObjectiveLens(id);
            }
        };
    }
    
    public Converter<String, TemObjectiveLens> ApplicationConversionServiceFactoryBean.getStringToTemObjectiveLensConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.instruments.TemObjectiveLens>() {
            public com.lacunalabs.dm.data.physics.instruments.TemObjectiveLens convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), TemObjectiveLens.class);
            }
        };
    }
    
    public Converter<Crystal, String> ApplicationConversionServiceFactoryBean.getCrystalToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.solidstate.Crystal, java.lang.String>() {
            public String convert(Crystal crystal) {
                return new StringBuilder().append(crystal.getName()).toString();
            }
        };
    }
    
    public Converter<BigInteger, Crystal> ApplicationConversionServiceFactoryBean.getIdToCrystalConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.solidstate.Crystal>() {
            public com.lacunalabs.dm.data.physics.solidstate.Crystal convert(java.math.BigInteger id) {
                return crystalService.findCrystal(id);
            }
        };
    }
    
    public Converter<String, Crystal> ApplicationConversionServiceFactoryBean.getStringToCrystalConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.solidstate.Crystal>() {
            public com.lacunalabs.dm.data.physics.solidstate.Crystal convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), Crystal.class);
            }
        };
    }
    
    public Converter<CrystalPhysicalProperty, String> ApplicationConversionServiceFactoryBean.getCrystalPhysicalPropertyToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.solidstate.CrystalPhysicalProperty, java.lang.String>() {
            public String convert(CrystalPhysicalProperty crystalPhysicalProperty) {
                return new StringBuilder().append(crystalPhysicalProperty.getName()).append(' ').append(crystalPhysicalProperty.getQuantity()).append(' ').append(crystalPhysicalProperty.getFunctionParameters()).append(' ').append(crystalPhysicalProperty.getUncertainty()).toString();
            }
        };
    }
    
    public Converter<BigInteger, CrystalPhysicalProperty> ApplicationConversionServiceFactoryBean.getIdToCrystalPhysicalPropertyConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.solidstate.CrystalPhysicalProperty>() {
            public com.lacunalabs.dm.data.physics.solidstate.CrystalPhysicalProperty convert(java.math.BigInteger id) {
                return crystalPhysicalPropertyService.findCrystalPhysicalProperty(id);
            }
        };
    }
    
    public Converter<String, CrystalPhysicalProperty> ApplicationConversionServiceFactoryBean.getStringToCrystalPhysicalPropertyConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.solidstate.CrystalPhysicalProperty>() {
            public com.lacunalabs.dm.data.physics.solidstate.CrystalPhysicalProperty convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), CrystalPhysicalProperty.class);
            }
        };
    }
    
    public Converter<Material, String> ApplicationConversionServiceFactoryBean.getMaterialToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.solidstate.Material, java.lang.String>() {
            public String convert(Material material) {
                return new StringBuilder().append(material.getName()).append(' ').append(material.getMetadata()).append(' ').append(material.getTotalVolume()).toString();
            }
        };
    }
    
    public Converter<BigInteger, Material> ApplicationConversionServiceFactoryBean.getIdToMaterialConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.solidstate.Material>() {
            public com.lacunalabs.dm.data.physics.solidstate.Material convert(java.math.BigInteger id) {
                return materialService.findMaterial(id);
            }
        };
    }
    
    public Converter<String, Material> ApplicationConversionServiceFactoryBean.getStringToMaterialConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.solidstate.Material>() {
            public com.lacunalabs.dm.data.physics.solidstate.Material convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), Material.class);
            }
        };
    }
    
    public Converter<MaterialComponent, String> ApplicationConversionServiceFactoryBean.getMaterialComponentToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.solidstate.MaterialComponent, java.lang.String>() {
            public String convert(MaterialComponent materialComponent) {
                return new StringBuilder().append(materialComponent.getName()).append(' ').append(materialComponent.getTotalVolume()).toString();
            }
        };
    }
    
    public Converter<BigInteger, MaterialComponent> ApplicationConversionServiceFactoryBean.getIdToMaterialComponentConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.solidstate.MaterialComponent>() {
            public com.lacunalabs.dm.data.physics.solidstate.MaterialComponent convert(java.math.BigInteger id) {
                return materialComponentService.findMaterialComponent(id);
            }
        };
    }
    
    public Converter<String, MaterialComponent> ApplicationConversionServiceFactoryBean.getStringToMaterialComponentConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.solidstate.MaterialComponent>() {
            public com.lacunalabs.dm.data.physics.solidstate.MaterialComponent convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), MaterialComponent.class);
            }
        };
    }
    
    public Converter<MaterialComponentOrientations, String> ApplicationConversionServiceFactoryBean.getMaterialComponentOrientationsToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.solidstate.MaterialComponentOrientations, java.lang.String>() {
            public String convert(MaterialComponentOrientations materialComponentOrientations) {
                return "(no displayable fields)";
            }
        };
    }
    
    public Converter<BigInteger, MaterialComponentOrientations> ApplicationConversionServiceFactoryBean.getIdToMaterialComponentOrientationsConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.solidstate.MaterialComponentOrientations>() {
            public com.lacunalabs.dm.data.physics.solidstate.MaterialComponentOrientations convert(java.math.BigInteger id) {
                return materialComponentOrientationsService.findMaterialComponentOrientations(id);
            }
        };
    }
    
    public Converter<String, MaterialComponentOrientations> ApplicationConversionServiceFactoryBean.getStringToMaterialComponentOrientationsConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.solidstate.MaterialComponentOrientations>() {
            public com.lacunalabs.dm.data.physics.solidstate.MaterialComponentOrientations convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), MaterialComponentOrientations.class);
            }
        };
    }
    
    public Converter<MaterialComponentPhysicalProperty, String> ApplicationConversionServiceFactoryBean.getMaterialComponentPhysicalPropertyToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.solidstate.MaterialComponentPhysicalProperty, java.lang.String>() {
            public String convert(MaterialComponentPhysicalProperty materialComponentPhysicalProperty) {
                return new StringBuilder().append(materialComponentPhysicalProperty.getName()).append(' ').append(materialComponentPhysicalProperty.getQuantity()).append(' ').append(materialComponentPhysicalProperty.getFunctionParameters()).append(' ').append(materialComponentPhysicalProperty.getUncertainty()).toString();
            }
        };
    }
    
    public Converter<BigInteger, MaterialComponentPhysicalProperty> ApplicationConversionServiceFactoryBean.getIdToMaterialComponentPhysicalPropertyConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.solidstate.MaterialComponentPhysicalProperty>() {
            public com.lacunalabs.dm.data.physics.solidstate.MaterialComponentPhysicalProperty convert(java.math.BigInteger id) {
                return materialComponentPhysicalPropertyService.findMaterialComponentPhysicalProperty(id);
            }
        };
    }
    
    public Converter<String, MaterialComponentPhysicalProperty> ApplicationConversionServiceFactoryBean.getStringToMaterialComponentPhysicalPropertyConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.solidstate.MaterialComponentPhysicalProperty>() {
            public com.lacunalabs.dm.data.physics.solidstate.MaterialComponentPhysicalProperty convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), MaterialComponentPhysicalProperty.class);
            }
        };
    }
    
    public Converter<MaterialPhysicalProperty, String> ApplicationConversionServiceFactoryBean.getMaterialPhysicalPropertyToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.lacunalabs.dm.data.physics.solidstate.MaterialPhysicalProperty, java.lang.String>() {
            public String convert(MaterialPhysicalProperty materialPhysicalProperty) {
                return new StringBuilder().append(materialPhysicalProperty.getName()).append(' ').append(materialPhysicalProperty.getQuantity()).append(' ').append(materialPhysicalProperty.getFunctionParameters()).append(' ').append(materialPhysicalProperty.getUncertainty()).toString();
            }
        };
    }
    
    public Converter<BigInteger, MaterialPhysicalProperty> ApplicationConversionServiceFactoryBean.getIdToMaterialPhysicalPropertyConverter() {
        return new org.springframework.core.convert.converter.Converter<java.math.BigInteger, com.lacunalabs.dm.data.physics.solidstate.MaterialPhysicalProperty>() {
            public com.lacunalabs.dm.data.physics.solidstate.MaterialPhysicalProperty convert(java.math.BigInteger id) {
                return materialPhysicalPropertyService.findMaterialPhysicalProperty(id);
            }
        };
    }
    
    public Converter<String, MaterialPhysicalProperty> ApplicationConversionServiceFactoryBean.getStringToMaterialPhysicalPropertyConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.lacunalabs.dm.data.physics.solidstate.MaterialPhysicalProperty>() {
            public com.lacunalabs.dm.data.physics.solidstate.MaterialPhysicalProperty convert(String id) {
                return getObject().convert(getObject().convert(id, BigInteger.class), MaterialPhysicalProperty.class);
            }
        };
    }
    
    public void ApplicationConversionServiceFactoryBean.installLabelConverters(FormatterRegistry registry) {
        registry.addConverter(getOrientationToStringConverter());
        registry.addConverter(getIdToOrientationConverter());
        registry.addConverter(getStringToOrientationConverter());
        registry.addConverter(getOrientationRelationshipToStringConverter());
        registry.addConverter(getIdToOrientationRelationshipConverter());
        registry.addConverter(getStringToOrientationRelationshipConverter());
        registry.addConverter(getShape2DToStringConverter());
        registry.addConverter(getIdToShape2DConverter());
        registry.addConverter(getStringToShape2DConverter());
        registry.addConverter(getShape3DToStringConverter());
        registry.addConverter(getIdToShape3DConverter());
        registry.addConverter(getStringToShape3DConverter());
        registry.addConverter(getVector2DToStringConverter());
        registry.addConverter(getIdToVector2DConverter());
        registry.addConverter(getStringToVector2DConverter());
        registry.addConverter(getVector3DToStringConverter());
        registry.addConverter(getIdToVector3DConverter());
        registry.addConverter(getStringToVector3DConverter());
        registry.addConverter(getAtomicPositionToStringConverter());
        registry.addConverter(getIdToAtomicPositionConverter());
        registry.addConverter(getStringToAtomicPositionConverter());
        registry.addConverter(getBravaisLatticeToStringConverter());
        registry.addConverter(getIdToBravaisLatticeConverter());
        registry.addConverter(getStringToBravaisLatticeConverter());
        registry.addConverter(getCenteringToStringConverter());
        registry.addConverter(getIdToCenteringConverter());
        registry.addConverter(getStringToCenteringConverter());
        registry.addConverter(getLatticeVector3DToStringConverter());
        registry.addConverter(getIdToLatticeVector3DConverter());
        registry.addConverter(getStringToLatticeVector3DConverter());
        registry.addConverter(getPointGroupToStringConverter());
        registry.addConverter(getIdToPointGroupConverter());
        registry.addConverter(getStringToPointGroupConverter());
        registry.addConverter(getReflectionConditionToStringConverter());
        registry.addConverter(getIdToReflectionConditionConverter());
        registry.addConverter(getStringToReflectionConditionConverter());
        registry.addConverter(getSpaceGroupToStringConverter());
        registry.addConverter(getIdToSpaceGroupConverter());
        registry.addConverter(getStringToSpaceGroupConverter());
        registry.addConverter(getUnitCellToStringConverter());
        registry.addConverter(getIdToUnitCellConverter());
        registry.addConverter(getStringToUnitCellConverter());
        registry.addConverter(getUnitCellPhysicalPropertyToStringConverter());
        registry.addConverter(getIdToUnitCellPhysicalPropertyConverter());
        registry.addConverter(getStringToUnitCellPhysicalPropertyConverter());
        registry.addConverter(getUnitCellTypeToStringConverter());
        registry.addConverter(getIdToUnitCellTypeConverter());
        registry.addConverter(getStringToUnitCellTypeConverter());
        registry.addConverter(getProcessorToStringConverter());
        registry.addConverter(getIdToProcessorConverter());
        registry.addConverter(getStringToProcessorConverter());
        registry.addConverter(getTemExperimentToStringConverter());
        registry.addConverter(getIdToTemExperimentConverter());
        registry.addConverter(getStringToTemExperimentConverter());
        registry.addConverter(getBaseUnitToStringConverter());
        registry.addConverter(getIdToBaseUnitConverter());
        registry.addConverter(getStringToBaseUnitConverter());
        registry.addConverter(getBaseUnitEnumeratorToStringConverter());
        registry.addConverter(getIdToBaseUnitEnumeratorConverter());
        registry.addConverter(getStringToBaseUnitEnumeratorConverter());
        registry.addConverter(getCompositeParticleToStringConverter());
        registry.addConverter(getIdToCompositeParticleConverter());
        registry.addConverter(getStringToCompositeParticleConverter());
        registry.addConverter(getDecimalMultiplierToStringConverter());
        registry.addConverter(getIdToDecimalMultiplierConverter());
        registry.addConverter(getStringToDecimalMultiplierConverter());
        registry.addConverter(getParticleToStringConverter());
        registry.addConverter(getIdToParticleConverter());
        registry.addConverter(getStringToParticleConverter());
        registry.addConverter(getParticleBeamToStringConverter());
        registry.addConverter(getIdToParticleBeamConverter());
        registry.addConverter(getStringToParticleBeamConverter());
        registry.addConverter(getParticleEnumeratorToStringConverter());
        registry.addConverter(getIdToParticleEnumeratorConverter());
        registry.addConverter(getStringToParticleEnumeratorConverter());
        registry.addConverter(getParticlePhysicalPropertyToStringConverter());
        registry.addConverter(getIdToParticlePhysicalPropertyConverter());
        registry.addConverter(getStringToParticlePhysicalPropertyConverter());
        registry.addConverter(getPeriodicTableToStringConverter());
        registry.addConverter(getIdToPeriodicTableConverter());
        registry.addConverter(getStringToPeriodicTableConverter());
        registry.addConverter(getPeriodicTableEntryToStringConverter());
        registry.addConverter(getIdToPeriodicTableEntryConverter());
        registry.addConverter(getStringToPeriodicTableEntryConverter());
        registry.addConverter(getPhysicalConstantToStringConverter());
        registry.addConverter(getIdToPhysicalConstantConverter());
        registry.addConverter(getStringToPhysicalConstantConverter());
        registry.addConverter(getPhysicalPropertyTypeToStringConverter());
        registry.addConverter(getIdToPhysicalPropertyTypeConverter());
        registry.addConverter(getStringToPhysicalPropertyTypeConverter());
        registry.addConverter(getPhysicalPropertyTypeFieldToStringConverter());
        registry.addConverter(getIdToPhysicalPropertyTypeFieldConverter());
        registry.addConverter(getStringToPhysicalPropertyTypeFieldConverter());
        registry.addConverter(getScienceUnitToStringConverter());
        registry.addConverter(getIdToScienceUnitConverter());
        registry.addConverter(getStringToScienceUnitConverter());
        registry.addConverter(getUnitToStringConverter());
        registry.addConverter(getIdToUnitConverter());
        registry.addConverter(getStringToUnitConverter());
        registry.addConverter(getAperatureToStringConverter());
        registry.addConverter(getIdToAperatureConverter());
        registry.addConverter(getStringToAperatureConverter());
        registry.addConverter(getCcdCameraToStringConverter());
        registry.addConverter(getIdToCcdCameraConverter());
        registry.addConverter(getStringToCcdCameraConverter());
        registry.addConverter(getLensPhysicalPropertyToStringConverter());
        registry.addConverter(getIdToLensPhysicalPropertyConverter());
        registry.addConverter(getStringToLensPhysicalPropertyConverter());
        registry.addConverter(getTemToStringConverter());
        registry.addConverter(getIdToTemConverter());
        registry.addConverter(getStringToTemConverter());
        registry.addConverter(getTemDoubleTiltHolderToStringConverter());
        registry.addConverter(getIdToTemDoubleTiltHolderConverter());
        registry.addConverter(getStringToTemDoubleTiltHolderConverter());
        registry.addConverter(getTemObjectiveLensToStringConverter());
        registry.addConverter(getIdToTemObjectiveLensConverter());
        registry.addConverter(getStringToTemObjectiveLensConverter());
        registry.addConverter(getCrystalToStringConverter());
        registry.addConverter(getIdToCrystalConverter());
        registry.addConverter(getStringToCrystalConverter());
        registry.addConverter(getCrystalPhysicalPropertyToStringConverter());
        registry.addConverter(getIdToCrystalPhysicalPropertyConverter());
        registry.addConverter(getStringToCrystalPhysicalPropertyConverter());
        registry.addConverter(getMaterialToStringConverter());
        registry.addConverter(getIdToMaterialConverter());
        registry.addConverter(getStringToMaterialConverter());
        registry.addConverter(getMaterialComponentToStringConverter());
        registry.addConverter(getIdToMaterialComponentConverter());
        registry.addConverter(getStringToMaterialComponentConverter());
        registry.addConverter(getMaterialComponentOrientationsToStringConverter());
        registry.addConverter(getIdToMaterialComponentOrientationsConverter());
        registry.addConverter(getStringToMaterialComponentOrientationsConverter());
        registry.addConverter(getMaterialComponentPhysicalPropertyToStringConverter());
        registry.addConverter(getIdToMaterialComponentPhysicalPropertyConverter());
        registry.addConverter(getStringToMaterialComponentPhysicalPropertyConverter());
        registry.addConverter(getMaterialPhysicalPropertyToStringConverter());
        registry.addConverter(getIdToMaterialPhysicalPropertyConverter());
        registry.addConverter(getStringToMaterialPhysicalPropertyConverter());
    }
    
    public void ApplicationConversionServiceFactoryBean.afterPropertiesSet() {
        super.afterPropertiesSet();
        installLabelConverters(getObject());
    }
    
}
