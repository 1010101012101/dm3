// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.data.repository.physics.fundamental;

import com.lacunalabs.dm.data.physics.fundamental.PeriodicTable;
import com.lacunalabs.dm.data.repository.physics.fundamental.PeriodicTableRepository;
import com.lacunalabs.dm.data.repository.physics.fundamental.PeriodicTableServiceImpl;
import java.math.BigInteger;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect PeriodicTableServiceImpl_Roo_Service {
    
    declare @type: PeriodicTableServiceImpl: @Service;
    
    declare @type: PeriodicTableServiceImpl: @Transactional;
    
    @Autowired
    PeriodicTableRepository PeriodicTableServiceImpl.periodicTableRepository;
    
    public long PeriodicTableServiceImpl.countAllPeriodicTables() {
        return periodicTableRepository.count();
    }
    
    public void PeriodicTableServiceImpl.deletePeriodicTable(PeriodicTable periodicTable) {
        periodicTableRepository.delete(periodicTable);
    }
    
    public PeriodicTable PeriodicTableServiceImpl.findPeriodicTable(BigInteger id) {
        return periodicTableRepository.findOne(id);
    }
    
    public List<PeriodicTable> PeriodicTableServiceImpl.findAllPeriodicTables() {
        return periodicTableRepository.findAll();
    }
    
    public List<PeriodicTable> PeriodicTableServiceImpl.findPeriodicTableEntries(int firstResult, int maxResults) {
        return periodicTableRepository.findAll(new org.springframework.data.domain.PageRequest(firstResult / maxResults, maxResults)).getContent();
    }
    
    public void PeriodicTableServiceImpl.savePeriodicTable(PeriodicTable periodicTable) {
        periodicTableRepository.save(periodicTable);
    }
    
    public PeriodicTable PeriodicTableServiceImpl.updatePeriodicTable(PeriodicTable periodicTable) {
        return periodicTableRepository.save(periodicTable);
    }
    
}
