// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.data.repository.physics.instruments;

import com.lacunalabs.dm.data.physics.instruments.LensPhysicalProperty;
import com.lacunalabs.dm.data.repository.physics.instruments.LensPhysicalPropertyRepository;
import com.lacunalabs.dm.data.repository.physics.instruments.LensPhysicalPropertyServiceImpl;
import java.math.BigInteger;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect LensPhysicalPropertyServiceImpl_Roo_Service {
    
    declare @type: LensPhysicalPropertyServiceImpl: @Service;
    
    declare @type: LensPhysicalPropertyServiceImpl: @Transactional;
    
    @Autowired
    LensPhysicalPropertyRepository LensPhysicalPropertyServiceImpl.lensPhysicalPropertyRepository;
    
    public long LensPhysicalPropertyServiceImpl.countAllLensPhysicalPropertys() {
        return lensPhysicalPropertyRepository.count();
    }
    
    public void LensPhysicalPropertyServiceImpl.deleteLensPhysicalProperty(LensPhysicalProperty lensPhysicalProperty) {
        lensPhysicalPropertyRepository.delete(lensPhysicalProperty);
    }
    
    public LensPhysicalProperty LensPhysicalPropertyServiceImpl.findLensPhysicalProperty(BigInteger id) {
        return lensPhysicalPropertyRepository.findOne(id);
    }
    
    public List<LensPhysicalProperty> LensPhysicalPropertyServiceImpl.findAllLensPhysicalPropertys() {
        return lensPhysicalPropertyRepository.findAll();
    }
    
    public List<LensPhysicalProperty> LensPhysicalPropertyServiceImpl.findLensPhysicalPropertyEntries(int firstResult, int maxResults) {
        return lensPhysicalPropertyRepository.findAll(new org.springframework.data.domain.PageRequest(firstResult / maxResults, maxResults)).getContent();
    }
    
    public void LensPhysicalPropertyServiceImpl.saveLensPhysicalProperty(LensPhysicalProperty lensPhysicalProperty) {
        lensPhysicalPropertyRepository.save(lensPhysicalProperty);
    }
    
    public LensPhysicalProperty LensPhysicalPropertyServiceImpl.updateLensPhysicalProperty(LensPhysicalProperty lensPhysicalProperty) {
        return lensPhysicalPropertyRepository.save(lensPhysicalProperty);
    }
    
}
