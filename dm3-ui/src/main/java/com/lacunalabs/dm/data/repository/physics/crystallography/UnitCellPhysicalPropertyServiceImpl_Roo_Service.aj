// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.data.repository.physics.crystallography;

import com.lacunalabs.dm.data.physics.crystallography.UnitCellPhysicalProperty;
import com.lacunalabs.dm.data.repository.physics.crystallography.UnitCellPhysicalPropertyRepository;
import com.lacunalabs.dm.data.repository.physics.crystallography.UnitCellPhysicalPropertyServiceImpl;
import java.math.BigInteger;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect UnitCellPhysicalPropertyServiceImpl_Roo_Service {
    
    declare @type: UnitCellPhysicalPropertyServiceImpl: @Service;
    
    declare @type: UnitCellPhysicalPropertyServiceImpl: @Transactional;
    
    @Autowired
    UnitCellPhysicalPropertyRepository UnitCellPhysicalPropertyServiceImpl.unitCellPhysicalPropertyRepository;
    
    public long UnitCellPhysicalPropertyServiceImpl.countAllUnitCellPhysicalPropertys() {
        return unitCellPhysicalPropertyRepository.count();
    }
    
    public void UnitCellPhysicalPropertyServiceImpl.deleteUnitCellPhysicalProperty(UnitCellPhysicalProperty unitCellPhysicalProperty) {
        unitCellPhysicalPropertyRepository.delete(unitCellPhysicalProperty);
    }
    
    public UnitCellPhysicalProperty UnitCellPhysicalPropertyServiceImpl.findUnitCellPhysicalProperty(BigInteger id) {
        return unitCellPhysicalPropertyRepository.findOne(id);
    }
    
    public List<UnitCellPhysicalProperty> UnitCellPhysicalPropertyServiceImpl.findAllUnitCellPhysicalPropertys() {
        return unitCellPhysicalPropertyRepository.findAll();
    }
    
    public List<UnitCellPhysicalProperty> UnitCellPhysicalPropertyServiceImpl.findUnitCellPhysicalPropertyEntries(int firstResult, int maxResults) {
        return unitCellPhysicalPropertyRepository.findAll(new org.springframework.data.domain.PageRequest(firstResult / maxResults, maxResults)).getContent();
    }
    
    public void UnitCellPhysicalPropertyServiceImpl.saveUnitCellPhysicalProperty(UnitCellPhysicalProperty unitCellPhysicalProperty) {
        unitCellPhysicalPropertyRepository.save(unitCellPhysicalProperty);
    }
    
    public UnitCellPhysicalProperty UnitCellPhysicalPropertyServiceImpl.updateUnitCellPhysicalProperty(UnitCellPhysicalProperty unitCellPhysicalProperty) {
        return unitCellPhysicalPropertyRepository.save(unitCellPhysicalProperty);
    }
    
}
