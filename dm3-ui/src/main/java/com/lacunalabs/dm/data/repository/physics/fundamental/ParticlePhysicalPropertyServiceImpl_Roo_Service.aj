// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lacunalabs.dm.data.repository.physics.fundamental;

import com.lacunalabs.dm.data.physics.fundamental.ParticlePhysicalProperty;
import com.lacunalabs.dm.data.repository.physics.fundamental.ParticlePhysicalPropertyRepository;
import com.lacunalabs.dm.data.repository.physics.fundamental.ParticlePhysicalPropertyServiceImpl;
import java.math.BigInteger;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ParticlePhysicalPropertyServiceImpl_Roo_Service {
    
    declare @type: ParticlePhysicalPropertyServiceImpl: @Service;
    
    declare @type: ParticlePhysicalPropertyServiceImpl: @Transactional;
    
    @Autowired
    ParticlePhysicalPropertyRepository ParticlePhysicalPropertyServiceImpl.particlePhysicalPropertyRepository;
    
    public long ParticlePhysicalPropertyServiceImpl.countAllParticlePhysicalPropertys() {
        return particlePhysicalPropertyRepository.count();
    }
    
    public void ParticlePhysicalPropertyServiceImpl.deleteParticlePhysicalProperty(ParticlePhysicalProperty particlePhysicalProperty) {
        particlePhysicalPropertyRepository.delete(particlePhysicalProperty);
    }
    
    public ParticlePhysicalProperty ParticlePhysicalPropertyServiceImpl.findParticlePhysicalProperty(BigInteger id) {
        return particlePhysicalPropertyRepository.findOne(id);
    }
    
    public List<ParticlePhysicalProperty> ParticlePhysicalPropertyServiceImpl.findAllParticlePhysicalPropertys() {
        return particlePhysicalPropertyRepository.findAll();
    }
    
    public List<ParticlePhysicalProperty> ParticlePhysicalPropertyServiceImpl.findParticlePhysicalPropertyEntries(int firstResult, int maxResults) {
        return particlePhysicalPropertyRepository.findAll(new org.springframework.data.domain.PageRequest(firstResult / maxResults, maxResults)).getContent();
    }
    
    public void ParticlePhysicalPropertyServiceImpl.saveParticlePhysicalProperty(ParticlePhysicalProperty particlePhysicalProperty) {
        particlePhysicalPropertyRepository.save(particlePhysicalProperty);
    }
    
    public ParticlePhysicalProperty ParticlePhysicalPropertyServiceImpl.updateParticlePhysicalProperty(ParticlePhysicalProperty particlePhysicalProperty) {
        return particlePhysicalPropertyRepository.save(particlePhysicalProperty);
    }
    
}
